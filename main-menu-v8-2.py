# Form implementation generated from reading ui file 'main_menu-v7-3.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from vtkmodules.qt.QVTKRenderWindowInteractor import QVTKRenderWindowInteractor
from vedo import load, Plotter
from PyQt6 import QtCore, QtWidgets
import json
import random
from datetime import datetime, date
from functools import partial
from math import log
import pickle
from PyQt6 import QtCore, QtGui, QtWidgets, QtSvgWidgets
from PyQt6.QtCore import QPropertyAnimation, QEasingCurve, QParallelAnimationGroup
from PyQt6.QtWidgets import QMessageBox, QSpinBox, QHeaderView, QApplication
from PyQt6.QtWidgets import *
from PyQt6.QtGui import *
from dateutil.relativedelta import relativedelta

from animation_settings import *
import os


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1320, 732)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.mainwindow = QtWidgets.QFrame(parent=self.centralwidget)
        self.mainwindow.setStyleSheet("background-color: rgb(226, 231, 255)")
        self.mainwindow.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.mainwindow.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.mainwindow.setObjectName("mainwindow")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.mainwindow)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.menu = QtWidgets.QFrame(parent=self.mainwindow)
        self.menu.setMinimumSize(QtCore.QSize(51, 0))
        self.menu.setMaximumSize(QtCore.QSize(0, 16777215))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(10)
        self.menu.setFont(font)
        self.menu.setStyleSheet("background-color: rgb(0, 0, 61);\n"
                                "color: white;")
        self.menu.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.menu.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.menu.setObjectName("menu")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.menu)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.options = QtWidgets.QFrame(parent=self.menu)
        self.options.setMinimumSize(QtCore.QSize(240, 0))
        self.options.setMaximumSize(QtCore.QSize(240, 16777215))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        self.options.setFont(font)
        self.options.setStyleSheet("QPushButton {\n"
                                   "border: 0px solid;\n"
                                   "color: white;\n"
                                   "text-align: left;\n"
                                   "padding-left: 9px;\n"
                                   "}\n"
                                   "\n"
                                   "QPushButton:hover {\n"
                                   "background-color: rgb(0, 0, 30);\n"
                                   "color: white;\n"
                                   "border-left: 3px solid;\n"
                                   "border-color: rgb(255, 255, 255);\n"
                                   "}\n"
                                   "\n"
                                   "QLabel {\n"
                                   "color: white;\n"
                                   "}")
        self.options.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.options.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.options.setObjectName("options")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.options)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.lbl_name_program = QtWidgets.QLabel(parent=self.options)
        self.lbl_name_program.setMinimumSize(QtCore.QSize(0, 80))
        self.lbl_name_program.setMaximumSize(QtCore.QSize(16777215, 80))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(19)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.lbl_name_program.setFont(font)
        self.lbl_name_program.setStyleSheet("color: white;")
        self.lbl_name_program.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_name_program.setObjectName("lbl_name_program")
        self.verticalLayout_3.addWidget(self.lbl_name_program, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.btn_menu = QtWidgets.QPushButton(parent=self.options)
        self.btn_menu.setMinimumSize(QtCore.QSize(0, 50))
        self.btn_menu.setMaximumSize(QtCore.QSize(16777215, 50))
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(12)
        self.btn_menu.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/menu-lockw.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.btn_menu.setIcon(icon)
        self.btn_menu.setIconSize(QtCore.QSize(30, 30))
        self.btn_menu.setObjectName("btn_menu")
        self.verticalLayout_3.addWidget(self.btn_menu)
        self.btn_paciente = QtWidgets.QPushButton(parent=self.options)
        self.btn_paciente.setMinimumSize(QtCore.QSize(0, 50))
        self.btn_paciente.setMaximumSize(QtCore.QSize(16777215, 50))
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(12)
        self.btn_paciente.setFont(font)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/patient.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.btn_paciente.setIcon(icon1)
        self.btn_paciente.setIconSize(QtCore.QSize(30, 30))
        self.btn_paciente.setObjectName("btn_paciente")
        self.verticalLayout_3.addWidget(self.btn_paciente)
        self.btn_estadistica_patient = QtWidgets.QPushButton(parent=self.options)
        self.btn_estadistica_patient.setMinimumSize(QtCore.QSize(0, 50))
        self.btn_estadistica_patient.setMaximumSize(QtCore.QSize(16777215, 50))
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(12)
        self.btn_estadistica_patient.setFont(font)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icons/analytics.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.btn_estadistica_patient.setIcon(icon2)
        self.btn_estadistica_patient.setIconSize(QtCore.QSize(30, 30))
        self.btn_estadistica_patient.setObjectName("btn_estadistica_patient")
        self.verticalLayout_3.addWidget(self.btn_estadistica_patient)
        self.btn_model3D = QtWidgets.QPushButton(parent=self.options)
        self.btn_model3D.setMinimumSize(QtCore.QSize(0, 50))
        self.btn_model3D.setMaximumSize(QtCore.QSize(16777215, 50))
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(12)
        self.btn_model3D.setFont(font)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icons/3d.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.btn_model3D.setIcon(icon3)
        self.btn_model3D.setIconSize(QtCore.QSize(30, 30))
        self.btn_model3D.setObjectName("btn_model3D")
        self.verticalLayout_3.addWidget(self.btn_model3D)
        self.btn_db = QtWidgets.QPushButton(parent=self.options)
        self.btn_db.setMinimumSize(QtCore.QSize(0, 50))
        self.btn_db.setMaximumSize(QtCore.QSize(16777215, 50))
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(12)
        self.btn_db.setFont(font)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icons/db.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.btn_db.setIcon(icon4)
        self.btn_db.setIconSize(QtCore.QSize(30, 30))
        self.btn_db.setObjectName("btn_db")
        self.verticalLayout_3.addWidget(self.btn_db)
        self.verticalLayout_2.addWidget(self.options, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.btn_creditos = QtWidgets.QPushButton(parent=self.menu)
        self.btn_creditos.setMinimumSize(QtCore.QSize(240, 50))
        self.btn_creditos.setMaximumSize(QtCore.QSize(240, 50))
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(12)
        self.btn_creditos.setFont(font)
        self.btn_creditos.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.btn_creditos.setStyleSheet("QPushButton {\n"
                                        "border: 0px solid;\n"
                                        "color: white;\n"
                                        "text-align: left;\n"
                                        "padding-left: 9px;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:hover {\n"
                                        "background-color: rgb(0, 0, 30);\n"
                                        "color: white;\n"
                                        "border-left: 3px solid;\n"
                                        "border-color: rgb(255, 255, 255);\n"
                                        "}")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("icons/credit.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.btn_creditos.setIcon(icon5)
        self.btn_creditos.setIconSize(QtCore.QSize(30, 30))
        self.btn_creditos.setObjectName("btn_creditos")
        self.verticalLayout_2.addWidget(self.btn_creditos)
        self.horizontalLayout.addWidget(self.menu)
        self.content = QtWidgets.QStackedWidget(parent=self.mainwindow)
        self.content.setStyleSheet("background-color: rgb(226, 231, 255);")
        self.content.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.content.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.content.setObjectName("content")
        self.Inicio = QtWidgets.QWidget()
        self.Inicio.setObjectName("Inicio")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.Inicio)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.fr_inicio = QtWidgets.QFrame(parent=self.Inicio)
        self.fr_inicio.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_inicio.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_inicio.setObjectName("frame")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.fr_inicio)
        self.verticalLayout_5.setContentsMargins(0, 0, -1, -1)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.lbl_inicio = QtWidgets.QLabel(parent=self.fr_inicio)
        self.lbl_inicio.setObjectName("label")
        self.verticalLayout_5.addWidget(self.lbl_inicio)
        self.verticalLayout_4.addWidget(self.fr_inicio)
        self.content.addWidget(self.Inicio)
        self.Paciente = QtWidgets.QWidget()
        self.Paciente.setObjectName("Paciente")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.Paciente)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setSpacing(0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.content_patient = QtWidgets.QStackedWidget(parent=self.Paciente)
        self.content_patient.setStyleSheet("QLineEdit {\n"
                                           "background-color: white;\n"
                                           "border: 1px solid;\n"
                                           "border-color: rgb(0, 0, 61);\n"
                                           "border-radius: 3px;\n"
                                           "}\n"
                                           "\n"
                                           "QComboBox {\n"
                                           "background-color: white;\n"
                                           "border: 1px solid;\n"
                                           "border-color: rgb(0, 0, 61);\n"
                                           "border-radius: 3px;\n"
                                           "}\n"
                                           "\n"
                                           "QDateEdit {\n"
                                           "background-color: white;\n"
                                           "border: 1px solid;\n"
                                           "border-color: rgb(0, 0, 61);\n"
                                           "border-radius: 3px;\n"
                                           "}")
        self.content_patient.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.content_patient.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.content_patient.setObjectName("content_patient")
        self.Pacientes = QtWidgets.QWidget()
        self.Pacientes.setObjectName("Pacientes")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.Pacientes)
        self.verticalLayout_18.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_18.setSpacing(0)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.fr_patient = QtWidgets.QFrame(parent=self.Pacientes)
        self.fr_patient.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_patient.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_patient.setObjectName("fr_patient")
        self.verticalLayout_17 = QtWidgets.QVBoxLayout(self.fr_patient)
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.lbl_title_p = QtWidgets.QFrame(parent=self.fr_patient)
        self.lbl_title_p.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.lbl_title_p.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.lbl_title_p.setObjectName("lbl_title_p")
        self.verticalLayout_19 = QtWidgets.QVBoxLayout(self.lbl_title_p)
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.lbl_tablep = QtWidgets.QLabel(parent=self.lbl_title_p)
        self.lbl_tablep.setMinimumSize(QtCore.QSize(250, 80))
        self.lbl_tablep.setMaximumSize(QtCore.QSize(250, 80))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(19)
        font.setBold(True)
        self.lbl_tablep.setFont(font)
        self.lbl_tablep.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_tablep.setObjectName("lbl_tablep")
        self.verticalLayout_19.addWidget(self.lbl_tablep, 0,
                                         QtCore.Qt.AlignmentFlag.AlignHCenter | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.verticalLayout_17.addWidget(self.lbl_title_p, 0,
                                         QtCore.Qt.AlignmentFlag.AlignHCenter | QtCore.Qt.AlignmentFlag.AlignTop)
        self.fr_tablep = QtWidgets.QFrame(parent=self.fr_patient)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred,
                                           QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fr_tablep.sizePolicy().hasHeightForWidth())
        self.fr_tablep.setSizePolicy(sizePolicy)
        self.fr_tablep.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_tablep.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_tablep.setObjectName("fr_tablep")
        self.verticalLayout_21 = QtWidgets.QVBoxLayout(self.fr_tablep)
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.table_patient = QtWidgets.QTableWidget(parent=self.fr_tablep)
        self.table_patient.setMinimumSize(QtCore.QSize(0, 0))
        self.table_patient.setStyleSheet("QTableWidget {\n"
                                         "background-color: white;\n"
                                         "border: 2px solid;\n"
                                         "border-color: rgb(0, 0, 61);\n"
                                         "border-radius: 5px;\n"
                                         "}")
        self.table_patient.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.table_patient.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.table_patient.setAlternatingRowColors(True)
        self.table_patient.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.SingleSelection)
        self.table_patient.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior.SelectRows)
        table_row = self.rows()
        self.table_patient.setRowCount(table_row)
        self.table_patient.setObjectName("table_patient")
        self.table_patient.setColumnCount(6)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(11)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        self.table_patient.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(11)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        self.table_patient.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(11)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        self.table_patient.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(11)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        self.table_patient.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(11)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        self.table_patient.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(11)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        self.table_patient.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(11)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        self.table_patient.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(11)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_patient.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(11)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_patient.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(11)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_patient.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(11)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_patient.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(11)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_patient.setItem(0, 4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(11)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_patient.setItem(0, 5, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(11)
        item.setFont(font)
        self.table_patient.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(11)
        item.setFont(font)
        self.table_patient.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(11)
        item.setFont(font)
        self.table_patient.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(11)
        item.setFont(font)
        self.table_patient.setItem(1, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(11)
        item.setFont(font)
        self.table_patient.setItem(1, 4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(11)
        item.setFont(font)
        self.table_patient.setItem(1, 5, item)
        self.items()
        self.table_patient.horizontalHeader().setVisible(False)
        self.table_patient.horizontalHeader().setCascadingSectionResizes(False)
        self.table_patient.horizontalHeader().setDefaultSectionSize(160)
        self.table_patient.horizontalHeader().setHighlightSections(True)
        self.table_patient.horizontalHeader().setSortIndicatorShown(False)
        self.table_patient.horizontalHeader().setStretchLastSection(False)
        self.table_patient.verticalHeader().setVisible(False)
        self.table_patient.verticalHeader().setCascadingSectionResizes(False)
        self.table_patient.verticalHeader().setSortIndicatorShown(False)
        self.table_patient.verticalHeader().setStretchLastSection(False)
        self.verticalLayout_21.addWidget(self.table_patient)
        self.verticalLayout_17.addWidget(self.fr_tablep)
        self.fr_add = QtWidgets.QFrame(parent=self.fr_patient)
        self.fr_add.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_add.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_add.setObjectName("fr_add")
        self.verticalLayout_20 = QtWidgets.QVBoxLayout(self.fr_add)
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        self.btn_add = QtWidgets.QPushButton(parent=self.fr_add)
        self.btn_add.setMinimumSize(QtCore.QSize(180, 50))
        self.btn_add.setMaximumSize(QtCore.QSize(180, 50))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(13)
        font.setBold(False)
        self.btn_add.setFont(font)
        self.btn_add.setStyleSheet("QPushButton {\n"
                                   "background-color: rgb(0, 0, 61);\n"
                                   "color: rgb(255, 255, 255);\n"
                                   "border: 1px solid white;\n"
                                   "border-radius: 10px;\n"
                                   "}\n"
                                   "\n"
                                   "QPushButton:hover {\n"
                                   "background-color: rgb(0, 0, 31);\n"
                                   "color: white;\n"
                                   "}")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("icons/add_patient.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.btn_add.setIcon(icon6)
        self.btn_add.setIconSize(QtCore.QSize(22, 22))
        self.btn_add.setObjectName("btn_add")
        self.verticalLayout_20.addWidget(self.btn_add, 0, QtCore.Qt.AlignmentFlag.AlignRight)
        self.verticalLayout_17.addWidget(self.fr_add)
        self.verticalLayout_18.addWidget(self.fr_patient)
        self.content_patient.addWidget(self.Pacientes)
        self.data_patient = QtWidgets.QWidget()
        self.data_patient.setStyleSheet("")
        self.data_patient.setObjectName("data_patient")
        self.verticalLayout_22 = QtWidgets.QVBoxLayout(self.data_patient)
        self.verticalLayout_22.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_22.setSpacing(0)
        self.verticalLayout_22.setObjectName("verticalLayout_22")
        self.ingresar_patient = QtWidgets.QStackedWidget(parent=self.data_patient)
        self.ingresar_patient.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.ingresar_patient.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.ingresar_patient.setObjectName("ingresar_patient")
        self.data_personal = QtWidgets.QWidget()
        self.data_personal.setStyleSheet("#first_data {\n"
                                         "border: 2.5px solid;\n"
                                         "border-color: rgb(0, 0, 61);\n"
                                         "border-radius: 5px;\n"
                                         "}\n"
                                         "\n"
                                         "#date_data {\n"
                                         "border: 2.5px solid;\n"
                                         "border-color: rgb(0, 0, 61);\n"
                                         "border-radius: 5px;\n"
                                         "}\n"
                                         "\n"
                                         "#data_deporte {\n"
                                         "border: 2.5px solid;\n"
                                         "border-color: rgb(0, 0, 61);\n"
                                         "border-radius: 5px;\n"
                                         "}\n"
                                         "\n"
                                         "#second_data {\n"
                                         "border: 2.5px solid;\n"
                                         "border-color: rgb(0, 0, 61);\n"
                                         "border-radius: 5px;\n"
                                         "}")
        self.data_personal.setObjectName("data_personal")
        self.verticalLayout_32 = QtWidgets.QVBoxLayout(self.data_personal)
        self.verticalLayout_32.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_32.setSpacing(0)
        self.verticalLayout_32.setObjectName("verticalLayout_32")
        self.contenedor_data = QtWidgets.QFrame(parent=self.data_personal)
        self.contenedor_data.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.contenedor_data.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.contenedor_data.setObjectName("contenedor_data")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.contenedor_data)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.frame_datos = QtWidgets.QFrame(parent=self.contenedor_data)
        self.frame_datos.setEnabled(True)
        self.frame_datos.setStyleSheet("")
        self.frame_datos.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_datos.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_datos.setObjectName("frame_datos")
        self.verticalLayout_23 = QtWidgets.QVBoxLayout(self.frame_datos)
        self.verticalLayout_23.setContentsMargins(10, 10, 10, 10)
        self.verticalLayout_23.setSpacing(0)
        self.verticalLayout_23.setObjectName("verticalLayout_23")
        self.frame_11 = QtWidgets.QFrame(parent=self.frame_datos)
        self.frame_11.setStyleSheet("background-color: white;\n"
                                    "font: 700 11pt \"Roboto\";\n"
                                    "color: black;\n"
                                    "border: 1px solid white;\n"
                                    "border-radius: 4;")
        self.frame_11.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_11.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_11.setObjectName("frame_11")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_11)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.frame_3 = QtWidgets.QFrame(parent=self.frame_11)
        self.frame_3.setStyleSheet("\n"
                                   "QLineEdit, QComboBox, QDateTimeEdit {\n"
                                   "    border-bottom: 1px solid rgb(213, 213, 213);\n"
                                   "    border-radius: 0;\n"
                                   "    font: 750 10pt \"Roboto\";    \n"
                                   "}\n"
                                   "\n"
                                   "\n"
                                   "QLineEdit[text=\"\"]  {\n"
                                   "    color: rgba(0,0,0, 1.0);\n"
                                   "    font: 750 10pt \"Roboto\";    \n"
                                   "}\n"
                                   "\n"
                                   "QComboBox {\n"
                                   "    color: black;\n"
                                   "    font: 750 10pt \"Roboto\";    \n"
                                   "}\n"
                                   "\n"
                                   "QComboBox::drop-down {\n"
                                   "    border:0px;\n"
                                   "}\n"
                                   "\n"
                                   "QDateTimeEdit {\n"
                                   "    color: gray;\n"
                                   "}\n"
                                   "\n"
                                   "\n"
                                   "QDateTimeEdit::drop-down {\n"
                                   "    border: 0;\n"
                                   "}\n"
                                   "\n"
                                   "QComboBox::down-arrow, QDateTimeEdit::down-arrow {\n"
                                   "    image: url(:/icons/keyboard_arrow_down_FILL0_wght400_GRAD0_opsz24.svg);\n"
                                   "    width: 64px;\n"
                                   "    height: 18px;\n"
                                   "    color: gray;\n"
                                   "}\n"
                                   "\n"
                                   "QComboBox::on {\n"
                                   "    border: 4px solid #c2dbfe;\n"
                                   "}\n"
                                   "\n"
                                   "QComboBox QListView {\n"
                                   "    font: 10pt \"Roboto\";\n"
                                   "    color: gray;\n"
                                   "    padding: 4px;\n"
                                   "    border: 1px solid rgba(0,0,0, 10%);\n"
                                   "    background-color: #fff;\n"
                                   "    outline: 0px;\n"
                                   "    border-radius: 0;\n"
                                   " }\n"
                                   "\n"
                                   "QComboBox QListView::item {\n"
                                   "    color: gray;\n"
                                   "    padding-top: 4px;\n"
                                   "    padding-left: 4px;\n"
                                   "}")
        self.frame_3.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_3.setLineWidth(20)
        self.frame_3.setMidLineWidth(28)
        self.frame_3.setObjectName("frame_3")
        self.label_4 = QtWidgets.QLabel(parent=self.frame_3)
        self.label_4.setGeometry(QtCore.QRect(90, 40, 391, 41))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("color: rgb(27, 38, 59);\n"
                                   "font: 800 17.5pt \"Roboto\";")
        self.label_4.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_4.setWordWrap(False)
        self.label_4.setObjectName("label_4")
        self.name = QtWidgets.QLineEdit(parent=self.frame_3)
        self.name.setGeometry(QtCore.QRect(50, 120, 231, 41))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        self.name.setFont(font)
        self.name.setStyleSheet("")
        self.name.setObjectName("name")
        self.apellido = QtWidgets.QLineEdit(parent=self.frame_3)
        self.apellido.setGeometry(QtCore.QRect(300, 120, 211, 41))
        self.apellido.setText("")
        self.apellido.setObjectName("apellido")
        self.tipo_pac = QtWidgets.QComboBox(parent=self.frame_3)
        self.tipo_pac.setGeometry(QtCore.QRect(53, 200, 458, 41))
        self.tipo_pac.setStyleSheet("QComboBox {\n"
                                    "    color: gray;\n"
                                    "}\n"
                                    "\n"
                                    "QComboBox::drop-down {\n"
                                    "    border:0px;\n"
                                    "}\n"
                                    "\n"
                                    "QComboBox::down-arrow {\n"
                                    "    image: url(:/icons/keyboard_arrow_down_FILL0_wght400_GRAD0_opsz24.svg);\n"
                                    "    width: 64px;\n"
                                    "    height: 18px;\n"
                                    "    color: gray;\n"
                                    "}")
        self.tipo_pac.setInsertPolicy(QtWidgets.QComboBox.InsertPolicy.InsertAtBottom)
        self.tipo_pac.setSizeAdjustPolicy(QtWidgets.QComboBox.SizeAdjustPolicy.AdjustToMinimumContentsLengthWithIcon)
        self.tipo_pac.setIconSize(QtCore.QSize(64, 64))
        self.tipo_pac.setFrame(True)
        self.tipo_pac.setObjectName("tipo_pac")
        self.tipo_pac.addItem("")
        self.tipo_pac.addItem("")
        self.sexo = QtWidgets.QComboBox(parent=self.frame_3)
        self.sexo.setGeometry(QtCore.QRect(53, 360, 458, 41))
        self.sexo.setStyleSheet("QComboBox {\n"
                                "    color: gray;\n"
                                "}\n"
                                "\n"
                                "QComboBox::drop-down {\n"
                                "    border:0px;\n"
                                "}\n"
                                "\n"
                                "QComboBox::down-arrow {\n"
                                "    image: url(:/icons/keyboard_arrow_down_FILL0_wght400_GRAD0_opsz24.svg);\n"
                                "    width: 64px;\n"
                                "    height: 18px;\n"
                                "    color: gray;\n"
                                "}")
        self.sexo.setInsertPolicy(QtWidgets.QComboBox.InsertPolicy.InsertAtBottom)
        self.sexo.setSizeAdjustPolicy(QtWidgets.QComboBox.SizeAdjustPolicy.AdjustToMinimumContentsLengthWithIcon)
        self.sexo.setIconSize(QtCore.QSize(64, 64))
        self.sexo.setFrame(True)
        self.sexo.setObjectName("sexo")
        self.sexo.addItem("")
        self.sexo.addItem("")
        self.fnacimiento = QtWidgets.QDateTimeEdit(parent=self.frame_3)
        self.fnacimiento.setGeometry(QtCore.QRect(53, 280, 458, 41))
        self.fnacimiento.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.fnacimiento.setSpecialValueText("")
        self.fnacimiento.setMaximumDate(QtCore.QDate(2024, 12, 31))
        self.fnacimiento.setMinimumDate(QtCore.QDate(1940, 9, 14))
        self.fnacimiento.setCalendarPopup(True)
        self.fnacimiento.setObjectName("fnacimiento")
        self.act_deporte = QtWidgets.QLineEdit(parent=self.frame_3)
        self.act_deporte.setGeometry(QtCore.QRect(50, 440, 458, 41))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        self.act_deporte.setFont(font)
        self.act_deporte.setStyleSheet("")
        self.act_deporte.setObjectName("act_deporte")
        self.btn_subir_foto = QtWidgets.QPushButton(parent=self.frame_3)
        self.btn_subir_foto.setGeometry(QtCore.QRect(240, 540, 111, 41))
        self.btn_subir_foto.setStyleSheet("QPushButton {\n"
                                          "    background-color:rgb(27, 38, 59);\n"
                                          "    border: 1px solid white;\n"
                                          "    border-radius: 10;\n"
                                          "    font: 750 9.5pt \"Roboto\";\n"
                                          "    color: white;\n"
                                          "}    \n"
                                          "\n"
                                          "QPushButton:hover {\n"
                                          "    font-size: 10pt;\n"
                                          "    background-color: black;\n"
                                          "}")
        self.btn_subir_foto.setObjectName("btn_subir_foto")
        self.lbl_info_foto = QtWidgets.QLabel(parent=self.frame_3)
        self.lbl_info_foto.setGeometry(QtCore.QRect(220, 500, 161, 31))
        self.lbl_info_foto.setStyleSheet("font: 9pt \"Roboto\";\n"
                                         "color: black;")
        self.lbl_info_foto.setText("")
        self.lbl_info_foto.setObjectName("lbl_info_foto")
        self.horizontalLayout_3.addWidget(self.frame_3)
        self.frame_12 = QtWidgets.QFrame(parent=self.frame_11)
        self.frame_12.setStyleSheet("QFrame {\n"
                                    "    background-color: rgb(27, 38, 59);\n"
                                    "    border: 1px solid rgb(27, 38, 59);\n"
                                    "}\n"
                                    "\n"
                                    "QLineEdit, QComboBox {\n"
                                    "    border-bottom: 1px solid rgb(213, 213, 213);\n"
                                    "    border-left: none;\n"
                                    "    border-right: none;\n"
                                    "    border-top: none;\n"
                                    "    border-radius: 0;\n"
                                    "    font: 550 10pt \"Roboto\";    \n"
                                    "    background-color: rgb(27, 38, 59);\n"
                                    "}\n"
                                    "\n"
                                    "QLineEdit[text=\"\"], QComboBox[text=\"\"] {\n"
                                    "    color: white;\n"
                                    "    font: 550 10pt \"Roboto\";\n"
                                    "    background-color:  rgb(27, 38, 59);\n"
                                    "}\n"
                                    "\n"
                                    "QComboBox {\n"
                                    "    color: white;\n"
                                    "    font: 550 10pt \"Roboto\";\n"
                                    "}\n"
                                    "\n"
                                    "QComboBox::drop-down {\n"
                                    "    border:0px;\n"
                                    "}\n"
                                    "\n"
                                    "QComboBox::down-arrow {\n"
                                    "    image: url(:/icons/keyboard-down-white.svg);\n"
                                    "    width: 64px;\n"
                                    "    height: 18px;\n"
                                    "}\n"
                                    "\n"
                                    "\n"
                                    "QComboBox QListView {\n"
                                    "    font: 750 10pt \"Roboto\";\n"
                                    "    padding: 4px;\n"
                                    "    border: 1px solid rgba(0,0,0, 10%);\n"
                                    "    background-color: #fff;\n"
                                    "    outline: 0px;\n"
                                    "    border-radius: 0;\n"
                                    " }\n"
                                    "\n"
                                    "QComboBox QListView::item {\n"
                                    "    color: white;\n"
                                    "    padding-top: 4px;\n"
                                    "    padding-left: 4px;\n"
                                    "}")
        self.frame_12.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.frame_12.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_12.setObjectName("frame_12")
        self.label_5 = QtWidgets.QLabel(parent=self.frame_12)
        self.label_5.setGeometry(QtCore.QRect(190, 40, 231, 41))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("color: white;\n"
                                   "font: 800 17.5pt \"Roboto\";\n"
                                   "border: none")
        self.label_5.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.country = QtWidgets.QComboBox(parent=self.frame_12)
        self.country.setGeometry(QtCore.QRect(60, 120, 471, 41))
        self.country.setStyleSheet("")
        self.country.setInsertPolicy(QtWidgets.QComboBox.InsertPolicy.InsertAtBottom)
        self.country.setSizeAdjustPolicy(QtWidgets.QComboBox.SizeAdjustPolicy.AdjustToMinimumContentsLengthWithIcon)
        self.country.setIconSize(QtCore.QSize(64, 64))
        self.country.setFrame(True)
        self.country.setObjectName("country")
        self.country.addItem("")
        self.documento = QtWidgets.QLineEdit(parent=self.frame_12)
        self.documento.setGeometry(QtCore.QRect(152, 200, 381, 41))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        self.documento.setFont(font)
        self.documento.setStyleSheet("")
        self.documento.setText("")
        self.documento.setObjectName("documento")
        self.tipo_doc = QtWidgets.QComboBox(parent=self.frame_12)
        self.tipo_doc.setGeometry(QtCore.QRect(60, 200, 71, 41))
        self.tipo_doc.setStyleSheet("")
        self.tipo_doc.setInsertPolicy(QtWidgets.QComboBox.InsertPolicy.InsertAtBottom)
        self.tipo_doc.setSizeAdjustPolicy(QtWidgets.QComboBox.SizeAdjustPolicy.AdjustToMinimumContentsLengthWithIcon)
        self.tipo_doc.setIconSize(QtCore.QSize(64, 64))
        self.tipo_doc.setFrame(True)
        self.tipo_doc.setObjectName("tipo_doc")
        self.tipo_doc.addItem("")
        self.correo = QtWidgets.QLineEdit(parent=self.frame_12)
        self.correo.setGeometry(QtCore.QRect(60, 280, 471, 41))
        self.correo.setText("")
        self.correo.setObjectName("correo")
        self.direccion = QtWidgets.QLineEdit(parent=self.frame_12)
        self.direccion.setGeometry(QtCore.QRect(60, 440, 471, 41))
        self.direccion.setText("")
        self.direccion.setObjectName("direccion")
        self.btn_sigR1 = QtWidgets.QPushButton(parent=self.frame_12)
        self.btn_sigR1.setGeometry(QtCore.QRect(230, 540, 151, 41))
        self.btn_sigR1.setStyleSheet("QPushButton {\n"
                                     "    background-color: white;\n"
                                     "    border: 1px solid rgb(27, 38, 59);\n"
                                     "    border-radius: 10;\n"
                                     "    font: 750 9.5pt \"Roboto\";\n"
                                     "    color: rgb(27, 38, 59);\n"
                                     "}    \n"
                                     "\n"
                                     "QPushButton::hover {\n"
                                     "    font: 750 10pt \"Roboto\";\n"
                                     "    background-color: rgb(0, 0, 61);\n"
                                     "    color: white;\n"
                                     "}")
        self.btn_sigR1.setObjectName("btn_sigR1")
        self.code_country = QtWidgets.QComboBox(parent=self.frame_12)
        self.code_country.setGeometry(QtCore.QRect(58, 360, 71, 41))
        self.code_country.setStyleSheet("")
        self.code_country.setInsertPolicy(QtWidgets.QComboBox.InsertPolicy.InsertAtBottom)
        self.code_country.setSizeAdjustPolicy(
            QtWidgets.QComboBox.SizeAdjustPolicy.AdjustToMinimumContentsLengthWithIcon)
        self.code_country.setIconSize(QtCore.QSize(64, 64))
        self.code_country.setFrame(True)
        self.code_country.setObjectName("code_country")
        self.code_country.addItem("")
        self.telf = QtWidgets.QLineEdit(parent=self.frame_12)
        self.telf.setGeometry(QtCore.QRect(150, 360, 381, 41))
        self.telf.setText("")
        self.telf.setObjectName("telf")
        self.horizontalLayout_3.addWidget(self.frame_12)
        self.verticalLayout_23.addWidget(self.frame_11)
        self.verticalLayout_23.setStretch(0, 10)
        self.horizontalLayout_2.addWidget(self.frame_datos)
        self.verticalLayout_32.addWidget(self.contenedor_data)
        self.ingresar_patient.addWidget(self.data_personal)
        self.Mediciones = QtWidgets.QWidget()
        self.Mediciones.setObjectName("Mediciones")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.Mediciones)
        self.verticalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_8.setSpacing(0)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.scroll_medidas = QtWidgets.QScrollArea(parent=self.Mediciones)
        self.scroll_medidas.setStyleSheet("QScrollArea {border: 0px solid;}")
        self.scroll_medidas.setWidgetResizable(True)
        self.scroll_medidas.setObjectName("scroll_medidas")
        self.scrollArea_medidas = QtWidgets.QWidget()
        self.scrollArea_medidas.setGeometry(QtCore.QRect(0, 0, 1318, 1018))
        self.scrollArea_medidas.setObjectName("scrollArea_medidas")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.scrollArea_medidas)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.grid_content = QtWidgets.QFrame(parent=self.scrollArea_medidas)
        self.grid_content.setMinimumSize(QtCore.QSize(1300, 1000))
        self.grid_content.setStyleSheet("QTableWidget {\n"
                                        "background-color: rgb(255, 255, 255);\n"
                                        "}")
        self.grid_content.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.grid_content.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.grid_content.setObjectName("grid_content")
        self.gridLayout = QtWidgets.QGridLayout(self.grid_content)
        self.gridLayout.setObjectName("gridLayout")
        self.table_medidas = QtWidgets.QTableWidget(parent=self.grid_content)
        self.table_medidas.setMinimumSize(QtCore.QSize(0, 180))
        self.table_medidas.setMaximumSize(QtCore.QSize(16777215, 180))
        self.table_medidas.setObjectName("table_medidas")
        self.table_medidas.setColumnCount(5)
        self.table_medidas.setRowCount(4)
        item = QtWidgets.QTableWidgetItem()
        self.table_medidas.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_medidas.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_medidas.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_medidas.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_medidas.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_medidas.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_medidas.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_medidas.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_medidas.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_medidas.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_medidas.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_medidas.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_medidas.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_medidas.setItem(0, 4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 31))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_medidas.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_medidas.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_medidas.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_medidas.setItem(1, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_medidas.setItem(1, 4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 31))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_medidas.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_medidas.setItem(2, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_medidas.setItem(2, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_medidas.setItem(2, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_medidas.setItem(2, 4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 31))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_medidas.setItem(3, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_medidas.setItem(3, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_medidas.setItem(3, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_medidas.setItem(3, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_medidas.setItem(3, 4, item)
        self.table_medidas.horizontalHeader().setVisible(False)
        self.table_medidas.horizontalHeader().setDefaultSectionSize(127)
        self.table_medidas.horizontalHeader().setHighlightSections(True)
        self.table_medidas.verticalHeader().setVisible(False)
        self.table_medidas.verticalHeader().setDefaultSectionSize(30)
        self.table_medidas.verticalHeader().setHighlightSections(True)
        self.table_medidas.verticalHeader().setMinimumSectionSize(0)
        self.table_medidas.verticalHeader().setStretchLastSection(False)
        self.gridLayout.addWidget(self.table_medidas, 2, 0, 1, 1)
        self.lbl_pliegues_cut = QtWidgets.QLabel(parent=self.grid_content)
        self.lbl_pliegues_cut.setMinimumSize(QtCore.QSize(250, 80))
        self.lbl_pliegues_cut.setMaximumSize(QtCore.QSize(250, 80))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(16)
        font.setBold(True)
        self.lbl_pliegues_cut.setFont(font)
        self.lbl_pliegues_cut.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_pliegues_cut.setObjectName("lbl_pliegues_cut")
        self.gridLayout.addWidget(self.lbl_pliegues_cut, 1, 1, 1, 1, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.data_title_patient = QtWidgets.QFrame(parent=self.grid_content)
        self.data_title_patient.setMinimumSize(QtCore.QSize(700, 150))
        self.data_title_patient.setMaximumSize(QtCore.QSize(700, 150))
        self.data_title_patient.setStyleSheet("#data_title_patient {\n"
                                              "border: 1px solid;\n"
                                              "border-radius: 2px;\n"
                                              "border-color: rgb(0, 0, 61);\n"
                                              "}\n"
                                              "\n"
                                              "QFrame {\n"
                                              "background-color: rgb(221, 226, 249);\n"
                                              "}")
        self.data_title_patient.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.data_title_patient.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.data_title_patient.setObjectName("data_title_patient")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.data_title_patient)
        self.verticalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_10.setSpacing(0)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.fr_photo_patient = QtWidgets.QFrame(parent=self.data_title_patient)
        self.fr_photo_patient.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_photo_patient.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_photo_patient.setObjectName("fr_photo_patient")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.fr_photo_patient)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.photo_patient = QtWidgets.QLabel(parent=self.fr_photo_patient)
        self.photo_patient.setMinimumSize(QtCore.QSize(60, 60))
        self.photo_patient.setMaximumSize(QtCore.QSize(60, 60))
        self.photo_patient.setText("")
        self.photo_patient.setPixmap(QtGui.QPixmap("images/foto-p.png"))
        self.photo_patient.setScaledContents(True)
        self.photo_patient.setObjectName("photo_patient")
        self.horizontalLayout_2.addWidget(self.photo_patient, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.verticalLayout_10.addWidget(self.fr_photo_patient)
        self.fr_data = QtWidgets.QFrame(parent=self.data_title_patient)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.fr_data.setFont(font)
        self.fr_data.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_data.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_data.setObjectName("fr_data")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.fr_data)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.lbl_fecha = QtWidgets.QLabel(parent=self.fr_data)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(False)
        self.lbl_fecha.setFont(font)
        self.lbl_fecha.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_fecha.setObjectName("lbl_fecha")
        self.horizontalLayout_3.addWidget(self.lbl_fecha)
        self.lbl_name_patient_medidas = QtWidgets.QLabel(parent=self.fr_data)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        self.lbl_name_patient_medidas.setFont(font)
        self.lbl_name_patient_medidas.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_name_patient_medidas.setObjectName("lbl_name_patient_medidas")
        self.horizontalLayout_3.addWidget(self.lbl_name_patient_medidas)
        self.lbl_hora = QtWidgets.QLabel(parent=self.fr_data)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        self.lbl_hora.setFont(font)
        self.lbl_hora.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_hora.setObjectName("lbl_hora")
        self.horizontalLayout_3.addWidget(self.lbl_hora)
        self.verticalLayout_10.addWidget(self.fr_data)
        self.gridLayout.addWidget(self.data_title_patient, 0, 0, 1, 2, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.table_pliegues_cut = QtWidgets.QTableWidget(parent=self.grid_content)
        self.table_pliegues_cut.setMinimumSize(QtCore.QSize(0, 180))
        self.table_pliegues_cut.setMaximumSize(QtCore.QSize(16777215, 180))
        self.table_pliegues_cut.setObjectName("table_pliegues_cut")
        self.table_pliegues_cut.setColumnCount(5)
        self.table_pliegues_cut.setRowCount(5)
        item = QtWidgets.QTableWidgetItem()
        self.table_pliegues_cut.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_pliegues_cut.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_pliegues_cut.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_pliegues_cut.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_pliegues_cut.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_pliegues_cut.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_pliegues_cut.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_pliegues_cut.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_pliegues_cut.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_pliegues_cut.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_pliegues_cut.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_pliegues_cut.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_pliegues_cut.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_pliegues_cut.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_pliegues_cut.setItem(0, 4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 31))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_pliegues_cut.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_pliegues_cut.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_pliegues_cut.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_pliegues_cut.setItem(1, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_pliegues_cut.setItem(1, 4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 31))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_pliegues_cut.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_pliegues_cut.setItem(2, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_pliegues_cut.setItem(2, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_pliegues_cut.setItem(2, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_pliegues_cut.setItem(2, 4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 31))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_pliegues_cut.setItem(3, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_pliegues_cut.setItem(3, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_pliegues_cut.setItem(3, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_pliegues_cut.setItem(3, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_pliegues_cut.setItem(3, 4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 31))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_pliegues_cut.setItem(4, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_pliegues_cut.setItem(4, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_pliegues_cut.setItem(4, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_pliegues_cut.setItem(4, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_pliegues_cut.setItem(4, 4, item)
        self.table_pliegues_cut.horizontalHeader().setVisible(False)
        self.table_pliegues_cut.horizontalHeader().setDefaultSectionSize(127)
        self.table_pliegues_cut.verticalHeader().setVisible(False)
        self.table_pliegues_cut.verticalHeader().setDefaultSectionSize(30)
        self.table_pliegues_cut.verticalHeader().setHighlightSections(True)
        self.table_pliegues_cut.verticalHeader().setMinimumSectionSize(0)
        self.table_pliegues_cut.verticalHeader().setStretchLastSection(False)
        self.gridLayout.addWidget(self.table_pliegues_cut, 2, 1, 1, 1)
        self.table_perife_circun = QtWidgets.QTableWidget(parent=self.grid_content)
        self.table_perife_circun.setMinimumSize(QtCore.QSize(852, 212))
        self.table_perife_circun.setMaximumSize(QtCore.QSize(852, 212))
        self.table_perife_circun.setRowCount(7)
        self.table_perife_circun.setColumnCount(5)
        self.table_perife_circun.setObjectName("table_perife_circun")
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(0, 4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 31))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_perife_circun.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_perife_circun.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(1, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(1, 4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 31))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_perife_circun.setItem(2, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_perife_circun.setItem(2, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(2, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(2, 4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 31))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(3, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_perife_circun.setItem(3, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_perife_circun.setItem(3, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(3, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(3, 4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 31))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(4, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_perife_circun.setItem(4, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_perife_circun.setItem(4, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(4, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(4, 4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 31))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(5, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_perife_circun.setItem(5, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_perife_circun.setItem(5, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(5, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(5, 4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 31))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(6, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_perife_circun.setItem(6, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_perife_circun.setItem(6, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(6, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_perife_circun.setItem(6, 4, item)
        self.table_perife_circun.horizontalHeader().setVisible(False)
        self.table_perife_circun.horizontalHeader().setDefaultSectionSize(170)
        self.table_perife_circun.verticalHeader().setVisible(False)
        self.gridLayout.addWidget(self.table_perife_circun, 5, 0, 1, 2, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.lbl_medidas_simples = QtWidgets.QLabel(parent=self.grid_content)
        self.lbl_medidas_simples.setMinimumSize(QtCore.QSize(250, 80))
        self.lbl_medidas_simples.setMaximumSize(QtCore.QSize(250, 80))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(16)
        font.setBold(True)
        self.lbl_medidas_simples.setFont(font)
        self.lbl_medidas_simples.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_medidas_simples.setObjectName("lbl_medidas_simples")
        self.gridLayout.addWidget(self.lbl_medidas_simples, 1, 0, 1, 1, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.lbl_perife_circun = QtWidgets.QLabel(parent=self.grid_content)
        self.lbl_perife_circun.setMinimumSize(QtCore.QSize(320, 80))
        self.lbl_perife_circun.setMaximumSize(QtCore.QSize(320, 80))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(16)
        font.setBold(True)
        self.lbl_perife_circun.setFont(font)
        self.lbl_perife_circun.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_perife_circun.setObjectName("lbl_perife_circun")
        self.gridLayout.addWidget(self.lbl_perife_circun, 4, 0, 1, 2, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.fr_guardar_medidas = QtWidgets.QFrame(parent=self.grid_content)
        self.fr_guardar_medidas.setMinimumSize(QtCore.QSize(0, 80))
        self.fr_guardar_medidas.setMaximumSize(QtCore.QSize(16777215, 80))
        self.fr_guardar_medidas.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_guardar_medidas.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_guardar_medidas.setObjectName("fr_guardar_medidas")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.fr_guardar_medidas)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.btn_guardar_medidas = QtWidgets.QPushButton(parent=self.fr_guardar_medidas)
        self.btn_guardar_medidas.setMinimumSize(QtCore.QSize(150, 50))
        self.btn_guardar_medidas.setMaximumSize(QtCore.QSize(150, 50))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(13)
        self.btn_guardar_medidas.setFont(font)
        self.btn_guardar_medidas.setStyleSheet("QPushButton {\n"
                                               "background-color: rgb(0, 0, 61);\n"
                                               "color: rgb(255, 255, 255);\n"
                                               "border: 1px solid white;\n"
                                               "border-radius: 10px;\n"
                                               "}\n"
                                               "\n"
                                               "QPushButton:hover {\n"
                                               "background-color: rgb(0, 0, 31);\n"
                                               "color: white;\n"
                                               "}")
        self.btn_guardar_medidas.setObjectName("btn_guardar_medidas")
        self.horizontalLayout_4.addWidget(self.btn_guardar_medidas)
        self.gridLayout.addWidget(self.fr_guardar_medidas, 8, 0, 1, 2)
        self.verticalLayout_9.addWidget(self.grid_content)
        self.scroll_medidas.setWidget(self.scrollArea_medidas)
        self.verticalLayout_8.addWidget(self.scroll_medidas)
        self.ingresar_patient.addWidget(self.Mediciones)
        self.Salida = QtWidgets.QWidget()
        self.Salida.setObjectName("Salida")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.Salida)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.fr_salida = QtWidgets.QFrame(parent=self.Salida)
        self.fr_salida.setMinimumSize(QtCore.QSize(0, 0))
        self.fr_salida.setMaximumSize(QtCore.QSize(16777215, 780))
        self.fr_salida.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_salida.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_salida.setObjectName("fr_salida")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.fr_salida)
        self.verticalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_12.setSpacing(0)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.fr_datos_patient_s = QtWidgets.QFrame(parent=self.fr_salida)
        self.fr_datos_patient_s.setMinimumSize(QtCore.QSize(0, 213))
        self.fr_datos_patient_s.setMaximumSize(QtCore.QSize(16777215, 213))
        self.fr_datos_patient_s.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_datos_patient_s.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_datos_patient_s.setObjectName("fr_datos_patient_s")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout(self.fr_datos_patient_s)
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.hora_s = QtWidgets.QLabel(parent=self.fr_datos_patient_s)
        self.hora_s.setMinimumSize(QtCore.QSize(140, 60))
        self.hora_s.setMaximumSize(QtCore.QSize(140, 60))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(10)
        self.hora_s.setFont(font)
        self.hora_s.setStyleSheet("background-color: white;\n"
                                  "color: rgb(0, 0, 31);\n"
                                  "border: 3px solid;\n"
                                  "border-radius: 5px;\n"
                                  "border-color: rgb(0, 0, 31);\n"
                                  "")
        self.hora_s.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.hora_s.setObjectName("hora_s")
        self.horizontalLayout_16.addWidget(self.hora_s)
        self.data_title_patient_s = QtWidgets.QFrame(parent=self.fr_datos_patient_s)
        self.data_title_patient_s.setMinimumSize(QtCore.QSize(890, 200))
        self.data_title_patient_s.setMaximumSize(QtCore.QSize(890, 200))
        self.data_title_patient_s.setStyleSheet("#data_title_patient {\n"
                                                "border: 1px solid;\n"
                                                "border-radius: 5px;\n"
                                                "border-color: rgb(0, 0, 61);\n"
                                                "}\n"
                                                "\n"
                                                "QFrame {\n"
                                                "background-color: rgb(221, 226, 249);\n"
                                                "}")
        self.data_title_patient_s.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.data_title_patient_s.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.data_title_patient_s.setObjectName("data_title_patient_s")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.data_title_patient_s)
        self.verticalLayout_13.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_13.setSpacing(0)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.fr_photo_patient_s = QtWidgets.QFrame(parent=self.data_title_patient_s)
        self.fr_photo_patient_s.setMaximumSize(QtCore.QSize(16777215, 80))
        self.fr_photo_patient_s.setStyleSheet("background-color: rgb(0, 0, 31)")
        self.fr_photo_patient_s.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_photo_patient_s.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_photo_patient_s.setObjectName("fr_photo_patient_s")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.fr_photo_patient_s)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.photo_patient_s = QtWidgets.QLabel(parent=self.fr_photo_patient_s)
        self.photo_patient_s.setMinimumSize(QtCore.QSize(60, 60))
        self.photo_patient_s.setMaximumSize(QtCore.QSize(60, 60))
        self.photo_patient_s.setStyleSheet("border: 2px solid;\n"
                                           "border-color: white;")
        self.photo_patient_s.setText("")
        self.photo_patient_s.setPixmap(QtGui.QPixmap("images/foto-p.png"))
        self.photo_patient_s.setScaledContents(True)
        self.photo_patient_s.setObjectName("photo_patient_s")
        self.horizontalLayout_7.addWidget(self.photo_patient_s, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.verticalLayout_13.addWidget(self.fr_photo_patient_s)
        self.fr_data_patient_s = QtWidgets.QFrame(parent=self.data_title_patient_s)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.fr_data_patient_s.setFont(font)
        self.fr_data_patient_s.setStyleSheet("#fr_data_patient_s {\n"
                                             "border: 3px solid;\n"
                                             "border-radius: 5px;\n"
                                             "border-color: rgb(0, 0, 31);\n"
                                             "}\n"
                                             "\n"
                                             "QFrame {\n"
                                             "background-color: white;\n"
                                             "}\n"
                                             "\n"
                                             "QLabel {\n"
                                             "background-color: white;\n"
                                             "color: rgb(0, 0, 31);\n"
                                             "}")
        self.fr_data_patient_s.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_data_patient_s.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_data_patient_s.setObjectName("fr_data_patient_s")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.fr_data_patient_s)
        self.verticalLayout_14.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_14.setSpacing(0)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.fr_name_s = QtWidgets.QFrame(parent=self.fr_data_patient_s)
        self.fr_name_s.setMinimumSize(QtCore.QSize(0, 40))
        self.fr_name_s.setMaximumSize(QtCore.QSize(16777215, 40))
        self.fr_name_s.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_name_s.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_name_s.setObjectName("fr_name_s")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout(self.fr_name_s)
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.nombrec_s = QtWidgets.QLabel(parent=self.fr_name_s)
        self.nombrec_s.setMinimumSize(QtCore.QSize(200, 20))
        self.nombrec_s.setMaximumSize(QtCore.QSize(200, 20))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(10)
        self.nombrec_s.setFont(font)
        self.nombrec_s.setStyleSheet("border-bottom: 2px solid;\n"
                                     "border-radius: 30px;\n"
                                     "border-color: rgb(0, 0, 31);")
        self.nombrec_s.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.nombrec_s.setObjectName("nombrec_s")
        self.horizontalLayout_14.addWidget(self.nombrec_s)
        self.verticalLayout_14.addWidget(self.fr_name_s)
        self.fr_datapatient_s = QtWidgets.QFrame(parent=self.fr_data_patient_s)
        self.fr_datapatient_s.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_datapatient_s.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_datapatient_s.setObjectName("fr_datapatient_s")
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout(self.fr_datapatient_s)
        self.horizontalLayout_15.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_15.setSpacing(0)
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.fr_datap_s1 = QtWidgets.QFrame(parent=self.fr_datapatient_s)
        self.fr_datap_s1.setMinimumSize(QtCore.QSize(210, 0))
        self.fr_datap_s1.setMaximumSize(QtCore.QSize(210, 16777215))
        self.fr_datap_s1.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_datap_s1.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_datap_s1.setObjectName("fr_datap_s1")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout(self.fr_datap_s1)
        self.verticalLayout_15.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_15.setSpacing(0)
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.documento_s = QtWidgets.QLabel(parent=self.fr_datap_s1)
        self.documento_s.setMinimumSize(QtCore.QSize(150, 20))
        self.documento_s.setMaximumSize(QtCore.QSize(16777215, 20))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(10)
        self.documento_s.setFont(font)
        self.documento_s.setStyleSheet("")
        self.documento_s.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.documento_s.setObjectName("documento_s")
        self.verticalLayout_15.addWidget(self.documento_s, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.tipo_patient_s = QtWidgets.QLabel(parent=self.fr_datap_s1)
        self.tipo_patient_s.setMinimumSize(QtCore.QSize(150, 20))
        self.tipo_patient_s.setMaximumSize(QtCore.QSize(16777215, 20))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(10)
        self.tipo_patient_s.setFont(font)
        self.tipo_patient_s.setStyleSheet("")
        self.tipo_patient_s.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.tipo_patient_s.setObjectName("tipo_patient_s")
        self.verticalLayout_15.addWidget(self.tipo_patient_s, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.horizontalLayout_15.addWidget(self.fr_datap_s1)
        self.fr_datap_s2 = QtWidgets.QFrame(parent=self.fr_datapatient_s)
        self.fr_datap_s2.setMinimumSize(QtCore.QSize(210, 0))
        self.fr_datap_s2.setMaximumSize(QtCore.QSize(210, 16777215))
        self.fr_datap_s2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_datap_s2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_datap_s2.setObjectName("fr_datap_s2")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout(self.fr_datap_s2)
        self.verticalLayout_16.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_16.setSpacing(0)
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.sexo_s = QtWidgets.QLabel(parent=self.fr_datap_s2)
        self.sexo_s.setMinimumSize(QtCore.QSize(150, 20))
        self.sexo_s.setMaximumSize(QtCore.QSize(16777215, 20))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(10)
        self.sexo_s.setFont(font)
        self.sexo_s.setStyleSheet("")
        self.sexo_s.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.sexo_s.setObjectName("sexo_s")
        self.verticalLayout_16.addWidget(self.sexo_s, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.nombrec_s_5 = QtWidgets.QLabel(parent=self.fr_datap_s2)
        self.nombrec_s_5.setMinimumSize(QtCore.QSize(150, 20))
        self.nombrec_s_5.setMaximumSize(QtCore.QSize(16777215, 20))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(10)
        self.nombrec_s_5.setFont(font)
        self.nombrec_s_5.setStyleSheet("")
        self.nombrec_s_5.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.nombrec_s_5.setObjectName("nombrec_s_5")
        self.verticalLayout_16.addWidget(self.nombrec_s_5, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.horizontalLayout_15.addWidget(self.fr_datap_s2)
        self.fr_datap_s3 = QtWidgets.QFrame(parent=self.fr_datapatient_s)
        self.fr_datap_s3.setMinimumSize(QtCore.QSize(210, 0))
        self.fr_datap_s3.setMaximumSize(QtCore.QSize(210, 16777215))
        self.fr_datap_s3.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_datap_s3.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_datap_s3.setObjectName("fr_datap_s3")
        self.verticalLayout_36 = QtWidgets.QVBoxLayout(self.fr_datap_s3)
        self.verticalLayout_36.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_36.setSpacing(0)
        self.verticalLayout_36.setObjectName("verticalLayout_36")
        self.telf_s = QtWidgets.QLabel(parent=self.fr_datap_s3)
        self.telf_s.setMinimumSize(QtCore.QSize(150, 20))
        self.telf_s.setMaximumSize(QtCore.QSize(16777215, 20))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(10)
        self.telf_s.setFont(font)
        self.telf_s.setStyleSheet("")
        self.telf_s.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.telf_s.setObjectName("telf_s")
        self.verticalLayout_36.addWidget(self.telf_s, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.Act_fisica_s = QtWidgets.QLabel(parent=self.fr_datap_s3)
        self.Act_fisica_s.setMinimumSize(QtCore.QSize(150, 20))
        self.Act_fisica_s.setMaximumSize(QtCore.QSize(16777215, 20))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(10)
        self.Act_fisica_s.setFont(font)
        self.Act_fisica_s.setStyleSheet("")
        self.Act_fisica_s.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.Act_fisica_s.setObjectName("Act_fisica_s")
        self.verticalLayout_36.addWidget(self.Act_fisica_s, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.horizontalLayout_15.addWidget(self.fr_datap_s3)
        self.fr_datap_s4 = QtWidgets.QFrame(parent=self.fr_datapatient_s)
        self.fr_datap_s4.setMinimumSize(QtCore.QSize(210, 0))
        self.fr_datap_s4.setMaximumSize(QtCore.QSize(210, 16777215))
        self.fr_datap_s4.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_datap_s4.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_datap_s4.setObjectName("fr_datap_s4")
        self.verticalLayout_37 = QtWidgets.QVBoxLayout(self.fr_datap_s4)
        self.verticalLayout_37.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_37.setSpacing(0)
        self.verticalLayout_37.setObjectName("verticalLayout_37")
        self.fnacimiento_s = QtWidgets.QLabel(parent=self.fr_datap_s4)
        self.fnacimiento_s.setMinimumSize(QtCore.QSize(160, 20))
        self.fnacimiento_s.setMaximumSize(QtCore.QSize(16777215, 20))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(10)
        self.fnacimiento_s.setFont(font)
        self.fnacimiento_s.setStyleSheet("")
        self.fnacimiento_s.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.fnacimiento_s.setObjectName("fnacimiento_s")
        self.verticalLayout_37.addWidget(self.fnacimiento_s)
        self.edad_s = QtWidgets.QLabel(parent=self.fr_datap_s4)
        self.edad_s.setMinimumSize(QtCore.QSize(150, 20))
        self.edad_s.setMaximumSize(QtCore.QSize(16777215, 20))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(10)
        self.edad_s.setFont(font)
        self.edad_s.setStyleSheet("")
        self.edad_s.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.edad_s.setObjectName("edad_s")
        self.verticalLayout_37.addWidget(self.edad_s)
        self.horizontalLayout_15.addWidget(self.fr_datap_s4)
        self.verticalLayout_14.addWidget(self.fr_datapatient_s)
        self.verticalLayout_13.addWidget(self.fr_data_patient_s)
        self.horizontalLayout_16.addWidget(self.data_title_patient_s)
        self.fecha_s = QtWidgets.QLabel(parent=self.fr_datos_patient_s)
        self.fecha_s.setMinimumSize(QtCore.QSize(140, 60))
        self.fecha_s.setMaximumSize(QtCore.QSize(140, 60))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(10)
        self.fecha_s.setFont(font)
        self.fecha_s.setStyleSheet("background-color: white;\n"
                                   "color: rgb(0, 0, 31);\n"
                                   "border: 3px solid;\n"
                                   "border-radius: 5px;\n"
                                   "border-color: rgb(0, 0, 31);\n"
                                   "")
        self.fecha_s.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.fecha_s.setObjectName("fecha_s")
        self.horizontalLayout_16.addWidget(self.fecha_s)
        self.verticalLayout_12.addWidget(self.fr_datos_patient_s, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.fr_calculos = QtWidgets.QFrame(parent=self.fr_salida)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding,
                                           QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fr_calculos.sizePolicy().hasHeightForWidth())
        self.fr_calculos.setSizePolicy(sizePolicy)
        self.fr_calculos.setMinimumSize(QtCore.QSize(0, 380))
        self.fr_calculos.setMaximumSize(QtCore.QSize(16777215, 380))
        self.fr_calculos.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_calculos.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_calculos.setObjectName("fr_calculos")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.fr_calculos)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.fr_seccion_s = QtWidgets.QFrame(parent=self.fr_calculos)
        self.fr_seccion_s.setMinimumSize(QtCore.QSize(1200, 0))
        self.fr_seccion_s.setMaximumSize(QtCore.QSize(1200, 16777215))
        self.fr_seccion_s.setStyleSheet("#fr_seccion_s {\n"
                                        "border: 3px solid;\n"
                                        "border-radius: 5px;\n"
                                        "border-color: rgb(0, 0, 31);\n"
                                        "}\n"
                                        "\n"
                                        "QFrame {\n"
                                        "background-color: white;\n"
                                        "}")
        self.fr_seccion_s.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_seccion_s.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_seccion_s.setObjectName("fr_seccion_s")
        self.verticalLayout_39 = QtWidgets.QVBoxLayout(self.fr_seccion_s)
        self.verticalLayout_39.setContentsMargins(4, 4, 4, 4)
        self.verticalLayout_39.setSpacing(0)
        self.verticalLayout_39.setObjectName("verticalLayout_39")
        self.fr_title_s = QtWidgets.QFrame(parent=self.fr_seccion_s)
        self.fr_title_s.setMinimumSize(QtCore.QSize(0, 40))
        self.fr_title_s.setMaximumSize(QtCore.QSize(16777215, 40))
        self.fr_title_s.setStyleSheet("background-color: rgb(0, 0, 31);\n"
                                      "border-radius: 5px;")
        self.fr_title_s.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_title_s.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_title_s.setObjectName("fr_title_s")
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout(self.fr_title_s)
        self.horizontalLayout_17.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_17.setSpacing(0)
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.lbl_title_cal_s = QtWidgets.QLabel(parent=self.fr_title_s)
        self.lbl_title_cal_s.setMinimumSize(QtCore.QSize(848, 20))
        self.lbl_title_cal_s.setMaximumSize(QtCore.QSize(848, 16777215))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(14)
        font.setBold(True)
        self.lbl_title_cal_s.setFont(font)
        self.lbl_title_cal_s.setStyleSheet("color: white;")
        self.lbl_title_cal_s.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_title_cal_s.setObjectName("lbl_title_cal_s")
        self.horizontalLayout_17.addWidget(self.lbl_title_cal_s)
        self.verticalLayout_39.addWidget(self.fr_title_s)
        self.fr_content_s = QtWidgets.QFrame(parent=self.fr_seccion_s)
        self.fr_content_s.setStyleSheet("#fr_content_s {\n"
                                        "background-color: rgb(72, 18, 178);\n"
                                        "border-radius: 5px;\n"
                                        "}")
        self.fr_content_s.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_content_s.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_content_s.setObjectName("fr_content_s")
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout(self.fr_content_s)
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.fr_salida1 = QtWidgets.QFrame(parent=self.fr_content_s)
        self.fr_salida1.setStyleSheet("#fr_salida1 {\n"
                                      "background-color: rgb(0, 0, 61);\n"
                                      "border: 1px solid;\n"
                                      "border-radius: 10px;\n"
                                      "border-color: rgb(0, 0, 31);\n"
                                      "}")
        self.fr_salida1.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_salida1.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_salida1.setObjectName("fr_salida1")
        self.verticalLayout_38 = QtWidgets.QVBoxLayout(self.fr_salida1)
        self.verticalLayout_38.setObjectName("verticalLayout_38")
        self.fr_imc = QtWidgets.QFrame(parent=self.fr_salida1)
        self.fr_imc.setMinimumSize(QtCore.QSize(0, 50))
        self.fr_imc.setMaximumSize(QtCore.QSize(16777215, 50))
        self.fr_imc.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_imc.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_imc.setObjectName("fr_imc")
        self.horizontalLayout_19 = QtWidgets.QHBoxLayout(self.fr_imc)
        self.horizontalLayout_19.setObjectName("horizontalLayout_19")
        self.lbl_icon = QtWidgets.QLabel(parent=self.fr_imc)
        self.lbl_icon.setMinimumSize(QtCore.QSize(25, 25))
        self.lbl_icon.setMaximumSize(QtCore.QSize(25, 25))
        self.lbl_icon.setText("")
        self.lbl_icon.setPixmap(QtGui.QPixmap("icons/icon_lista.png"))
        self.lbl_icon.setScaledContents(True)
        self.lbl_icon.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_icon.setObjectName("lbl_icon")
        self.horizontalLayout_19.addWidget(self.lbl_icon)
        self.lbl_imc = QtWidgets.QLabel(parent=self.fr_imc)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        self.lbl_imc.setFont(font)
        self.lbl_imc.setObjectName("lbl_imc")
        self.horizontalLayout_19.addWidget(self.lbl_imc)
        self.verticalLayout_38.addWidget(self.fr_imc)
        self.fr_icc = QtWidgets.QFrame(parent=self.fr_salida1)
        self.fr_icc.setMinimumSize(QtCore.QSize(0, 50))
        self.fr_icc.setMaximumSize(QtCore.QSize(16777215, 50))
        self.fr_icc.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_icc.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_icc.setObjectName("fr_icc")
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout(self.fr_icc)
        self.horizontalLayout_20.setObjectName("horizontalLayout_20")
        self.lbl_icon_2 = QtWidgets.QLabel(parent=self.fr_icc)
        self.lbl_icon_2.setMinimumSize(QtCore.QSize(25, 25))
        self.lbl_icon_2.setMaximumSize(QtCore.QSize(25, 25))
        self.lbl_icon_2.setText("")
        self.lbl_icon_2.setPixmap(QtGui.QPixmap("icons/icon_lista.png"))
        self.lbl_icon_2.setScaledContents(True)
        self.lbl_icon_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_icon_2.setObjectName("lbl_icon_2")
        self.horizontalLayout_20.addWidget(self.lbl_icon_2)
        self.lbl_icc = QtWidgets.QLabel(parent=self.fr_icc)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        self.lbl_icc.setFont(font)
        self.lbl_icc.setObjectName("lbl_icc")
        self.horizontalLayout_20.addWidget(self.lbl_icc)
        self.verticalLayout_38.addWidget(self.fr_icc)
        self.fr_ice = QtWidgets.QFrame(parent=self.fr_salida1)
        self.fr_ice.setMinimumSize(QtCore.QSize(0, 50))
        self.fr_ice.setMaximumSize(QtCore.QSize(16777215, 50))
        self.fr_ice.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_ice.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_ice.setObjectName("fr_ice")
        self.horizontalLayout_21 = QtWidgets.QHBoxLayout(self.fr_ice)
        self.horizontalLayout_21.setObjectName("horizontalLayout_21")
        self.lbl_icon_3 = QtWidgets.QLabel(parent=self.fr_ice)
        self.lbl_icon_3.setMinimumSize(QtCore.QSize(25, 25))
        self.lbl_icon_3.setMaximumSize(QtCore.QSize(25, 25))
        self.lbl_icon_3.setText("")
        self.lbl_icon_3.setPixmap(QtGui.QPixmap("icons/icon_lista.png"))
        self.lbl_icon_3.setScaledContents(True)
        self.lbl_icon_3.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_icon_3.setObjectName("lbl_icon_3")
        self.horizontalLayout_21.addWidget(self.lbl_icon_3)
        self.lbl_ice = QtWidgets.QLabel(parent=self.fr_ice)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        self.lbl_ice.setFont(font)
        self.lbl_ice.setObjectName("lbl_ice")
        self.horizontalLayout_21.addWidget(self.lbl_ice)
        self.verticalLayout_38.addWidget(self.fr_ice)
        self.fr_porcent_grasa = QtWidgets.QFrame(parent=self.fr_salida1)
        self.fr_porcent_grasa.setMinimumSize(QtCore.QSize(0, 50))
        self.fr_porcent_grasa.setMaximumSize(QtCore.QSize(16777215, 50))
        self.fr_porcent_grasa.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_porcent_grasa.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_porcent_grasa.setObjectName("fr_porcent_grasa")
        self.horizontalLayout_22 = QtWidgets.QHBoxLayout(self.fr_porcent_grasa)
        self.horizontalLayout_22.setObjectName("horizontalLayout_22")
        self.lbl_icon_4 = QtWidgets.QLabel(parent=self.fr_porcent_grasa)
        self.lbl_icon_4.setMinimumSize(QtCore.QSize(25, 25))
        self.lbl_icon_4.setMaximumSize(QtCore.QSize(25, 25))
        self.lbl_icon_4.setText("")
        self.lbl_icon_4.setPixmap(QtGui.QPixmap("icons/icon_lista.png"))
        self.lbl_icon_4.setScaledContents(True)
        self.lbl_icon_4.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_icon_4.setObjectName("lbl_icon_4")
        self.horizontalLayout_22.addWidget(self.lbl_icon_4)
        self.lbl_porcent_grasa = QtWidgets.QLabel(parent=self.fr_porcent_grasa)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        self.lbl_porcent_grasa.setFont(font)
        self.lbl_porcent_grasa.setObjectName("lbl_porcent_grasa")
        self.horizontalLayout_22.addWidget(self.lbl_porcent_grasa)
        self.verticalLayout_38.addWidget(self.fr_porcent_grasa)
        self.horizontalLayout_18.addWidget(self.fr_salida1)
        self.fr_salida2 = QtWidgets.QFrame(parent=self.fr_content_s)
        self.fr_salida2.setStyleSheet("#fr_salida2 {\n"
                                      "background-color: rgb(0, 0, 61);\n"
                                      "border: 1px solid;\n"
                                      "border-radius: 10px;\n"
                                      "border-color: rgb(0, 0, 31);\n"
                                      "}")
        self.fr_salida2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_salida2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_salida2.setObjectName("fr_salida2")
        self.verticalLayout_40 = QtWidgets.QVBoxLayout(self.fr_salida2)
        self.verticalLayout_40.setObjectName("verticalLayout_40")
        self.fr_pde_grasa = QtWidgets.QFrame(parent=self.fr_salida2)
        self.fr_pde_grasa.setMinimumSize(QtCore.QSize(0, 50))
        self.fr_pde_grasa.setMaximumSize(QtCore.QSize(16777215, 50))
        self.fr_pde_grasa.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_pde_grasa.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_pde_grasa.setObjectName("fr_pde_grasa")
        self.horizontalLayout_23 = QtWidgets.QHBoxLayout(self.fr_pde_grasa)
        self.horizontalLayout_23.setObjectName("horizontalLayout_23")
        self.lbl_icon_5 = QtWidgets.QLabel(parent=self.fr_pde_grasa)
        self.lbl_icon_5.setMinimumSize(QtCore.QSize(25, 25))
        self.lbl_icon_5.setMaximumSize(QtCore.QSize(25, 25))
        self.lbl_icon_5.setText("")
        self.lbl_icon_5.setPixmap(QtGui.QPixmap("icons/icon_lista.png"))
        self.lbl_icon_5.setScaledContents(True)
        self.lbl_icon_5.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_icon_5.setObjectName("lbl_icon_5")
        self.horizontalLayout_23.addWidget(self.lbl_icon_5)
        self.lbl_p_degrasa = QtWidgets.QLabel(parent=self.fr_pde_grasa)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        self.lbl_p_degrasa.setFont(font)
        self.lbl_p_degrasa.setObjectName("lbl_p_degrasa")
        self.horizontalLayout_23.addWidget(self.lbl_p_degrasa)
        self.verticalLayout_40.addWidget(self.fr_pde_grasa)
        self.fr_p_degrasa_percentil = QtWidgets.QFrame(parent=self.fr_salida2)
        self.fr_p_degrasa_percentil.setMinimumSize(QtCore.QSize(0, 50))
        self.fr_p_degrasa_percentil.setMaximumSize(QtCore.QSize(16777215, 50))
        self.fr_p_degrasa_percentil.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_p_degrasa_percentil.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_p_degrasa_percentil.setObjectName("fr_p_degrasa_percentil")
        self.horizontalLayout_24 = QtWidgets.QHBoxLayout(self.fr_p_degrasa_percentil)
        self.horizontalLayout_24.setObjectName("horizontalLayout_24")
        self.lbl_icon_6 = QtWidgets.QLabel(parent=self.fr_p_degrasa_percentil)
        self.lbl_icon_6.setMinimumSize(QtCore.QSize(25, 25))
        self.lbl_icon_6.setMaximumSize(QtCore.QSize(25, 25))
        self.lbl_icon_6.setText("")
        self.lbl_icon_6.setPixmap(QtGui.QPixmap("icons/icon_lista.png"))
        self.lbl_icon_6.setScaledContents(True)
        self.lbl_icon_6.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_icon_6.setObjectName("lbl_icon_6")
        self.horizontalLayout_24.addWidget(self.lbl_icon_6)
        self.lbl_p_degrasa_percentil = QtWidgets.QLabel(parent=self.fr_p_degrasa_percentil)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        self.lbl_p_degrasa_percentil.setFont(font)
        self.lbl_p_degrasa_percentil.setObjectName("lbl_p_degrasa_percentil")
        self.horizontalLayout_24.addWidget(self.lbl_p_degrasa_percentil)
        self.verticalLayout_40.addWidget(self.fr_p_degrasa_percentil)
        self.fr_indice_mlg = QtWidgets.QFrame(parent=self.fr_salida2)
        self.fr_indice_mlg.setMinimumSize(QtCore.QSize(0, 50))
        self.fr_indice_mlg.setMaximumSize(QtCore.QSize(16777215, 50))
        self.fr_indice_mlg.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_indice_mlg.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_indice_mlg.setObjectName("fr_indice_mlg")
        self.horizontalLayout_25 = QtWidgets.QHBoxLayout(self.fr_indice_mlg)
        self.horizontalLayout_25.setObjectName("horizontalLayout_25")
        self.lbl_icon_7 = QtWidgets.QLabel(parent=self.fr_indice_mlg)
        self.lbl_icon_7.setMinimumSize(QtCore.QSize(25, 25))
        self.lbl_icon_7.setMaximumSize(QtCore.QSize(25, 25))
        self.lbl_icon_7.setText("")
        self.lbl_icon_7.setPixmap(QtGui.QPixmap("icons/icon_lista.png"))
        self.lbl_icon_7.setScaledContents(True)
        self.lbl_icon_7.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_icon_7.setObjectName("lbl_icon_7")
        self.horizontalLayout_25.addWidget(self.lbl_icon_7)
        self.lbl_indice_mlg = QtWidgets.QLabel(parent=self.fr_indice_mlg)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        self.lbl_indice_mlg.setFont(font)
        self.lbl_indice_mlg.setObjectName("lbl_indice_mlg")
        self.horizontalLayout_25.addWidget(self.lbl_indice_mlg)
        self.verticalLayout_40.addWidget(self.fr_indice_mlg)
        self.fr_camb = QtWidgets.QFrame(parent=self.fr_salida2)
        self.fr_camb.setMinimumSize(QtCore.QSize(0, 50))
        self.fr_camb.setMaximumSize(QtCore.QSize(16777215, 50))
        self.fr_camb.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_camb.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_camb.setObjectName("fr_camb")
        self.horizontalLayout_26 = QtWidgets.QHBoxLayout(self.fr_camb)
        self.horizontalLayout_26.setObjectName("horizontalLayout_26")
        self.lbl_icon_8 = QtWidgets.QLabel(parent=self.fr_camb)
        self.lbl_icon_8.setMinimumSize(QtCore.QSize(25, 25))
        self.lbl_icon_8.setMaximumSize(QtCore.QSize(25, 25))
        self.lbl_icon_8.setText("")
        self.lbl_icon_8.setPixmap(QtGui.QPixmap("icons/icon_lista.png"))
        self.lbl_icon_8.setScaledContents(True)
        self.lbl_icon_8.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_icon_8.setObjectName("lbl_icon_8")
        self.horizontalLayout_26.addWidget(self.lbl_icon_8)
        self.lbl_camb = QtWidgets.QLabel(parent=self.fr_camb)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        self.lbl_camb.setFont(font)
        self.lbl_camb.setObjectName("lbl_camb")
        self.horizontalLayout_26.addWidget(self.lbl_camb)
        self.verticalLayout_40.addWidget(self.fr_camb)
        self.horizontalLayout_18.addWidget(self.fr_salida2)
        self.fr_salida3 = QtWidgets.QFrame(parent=self.fr_content_s)
        self.fr_salida3.setStyleSheet("#fr_salida3 {\n"
                                      "background-color: rgb(0, 0, 61);\n"
                                      "border: 1px solid;\n"
                                      "border-radius: 10px;\n"
                                      "border-color: rgb(0, 0, 31);\n"
                                      "}")
        self.fr_salida3.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_salida3.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_salida3.setObjectName("fr_salida3")
        self.verticalLayout_41 = QtWidgets.QVBoxLayout(self.fr_salida3)
        self.verticalLayout_41.setObjectName("verticalLayout_41")
        self.fr_iamb = QtWidgets.QFrame(parent=self.fr_salida3)
        self.fr_iamb.setMinimumSize(QtCore.QSize(0, 70))
        self.fr_iamb.setMaximumSize(QtCore.QSize(16777215, 70))
        self.fr_iamb.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_iamb.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_iamb.setObjectName("fr_iamb")
        self.horizontalLayout_28 = QtWidgets.QHBoxLayout(self.fr_iamb)
        self.horizontalLayout_28.setObjectName("horizontalLayout_28")
        self.lbl_icon_9 = QtWidgets.QLabel(parent=self.fr_iamb)
        self.lbl_icon_9.setMinimumSize(QtCore.QSize(25, 25))
        self.lbl_icon_9.setMaximumSize(QtCore.QSize(25, 25))
        self.lbl_icon_9.setText("")
        self.lbl_icon_9.setPixmap(QtGui.QPixmap("icons/icon_lista.png"))
        self.lbl_icon_9.setScaledContents(True)
        self.lbl_icon_9.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_icon_9.setObjectName("lbl_icon_9")
        self.horizontalLayout_28.addWidget(self.lbl_icon_9)
        self.lbl_iamb = QtWidgets.QLabel(parent=self.fr_iamb)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        self.lbl_iamb.setFont(font)
        self.lbl_iamb.setObjectName("lbl_iamb")
        self.horizontalLayout_28.addWidget(self.lbl_iamb)
        self.verticalLayout_41.addWidget(self.fr_iamb)
        self.fr_complex = QtWidgets.QFrame(parent=self.fr_salida3)
        self.fr_complex.setMinimumSize(QtCore.QSize(0, 70))
        self.fr_complex.setMaximumSize(QtCore.QSize(16777215, 70))
        self.fr_complex.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_complex.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_complex.setObjectName("fr_complex")
        self.horizontalLayout_29 = QtWidgets.QHBoxLayout(self.fr_complex)
        self.horizontalLayout_29.setObjectName("horizontalLayout_29")
        self.lbl_icon_10 = QtWidgets.QLabel(parent=self.fr_complex)
        self.lbl_icon_10.setMinimumSize(QtCore.QSize(25, 25))
        self.lbl_icon_10.setMaximumSize(QtCore.QSize(25, 25))
        self.lbl_icon_10.setText("")
        self.lbl_icon_10.setPixmap(QtGui.QPixmap("icons/icon_lista.png"))
        self.lbl_icon_10.setScaledContents(True)
        self.lbl_icon_10.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_icon_10.setObjectName("lbl_icon_10")
        self.horizontalLayout_29.addWidget(self.lbl_icon_10)
        self.lbl_complex = QtWidgets.QLabel(parent=self.fr_complex)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        self.lbl_complex.setFont(font)
        self.lbl_complex.setObjectName("lbl_complex")
        self.horizontalLayout_29.addWidget(self.lbl_complex)
        self.verticalLayout_41.addWidget(self.fr_complex)
        self.fr_peso_ideal = QtWidgets.QFrame(parent=self.fr_salida3)
        self.fr_peso_ideal.setMinimumSize(QtCore.QSize(0, 70))
        self.fr_peso_ideal.setMaximumSize(QtCore.QSize(16777215, 70))
        self.fr_peso_ideal.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_peso_ideal.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_peso_ideal.setObjectName("fr_peso_ideal")
        self.horizontalLayout_30 = QtWidgets.QHBoxLayout(self.fr_peso_ideal)
        self.horizontalLayout_30.setObjectName("horizontalLayout_30")
        self.lbl_icon_11 = QtWidgets.QLabel(parent=self.fr_peso_ideal)
        self.lbl_icon_11.setMinimumSize(QtCore.QSize(25, 25))
        self.lbl_icon_11.setMaximumSize(QtCore.QSize(25, 25))
        self.lbl_icon_11.setText("")
        self.lbl_icon_11.setPixmap(QtGui.QPixmap("icons/icon_lista.png"))
        self.lbl_icon_11.setScaledContents(True)
        self.lbl_icon_11.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_icon_11.setObjectName("lbl_icon_11")
        self.horizontalLayout_30.addWidget(self.lbl_icon_11)
        self.lbl_peso_ideal = QtWidgets.QLabel(parent=self.fr_peso_ideal)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        self.lbl_peso_ideal.setFont(font)
        self.lbl_peso_ideal.setObjectName("lbl_peso_ideal")
        self.horizontalLayout_30.addWidget(self.lbl_peso_ideal)
        self.verticalLayout_41.addWidget(self.fr_peso_ideal)
        self.horizontalLayout_18.addWidget(self.fr_salida3)
        self.verticalLayout_39.addWidget(self.fr_content_s)
        self.horizontalLayout_6.addWidget(self.fr_seccion_s)
        self.verticalLayout_12.addWidget(self.fr_calculos)
        self.fr_buttons_s = QtWidgets.QFrame(parent=self.fr_salida)
        self.fr_buttons_s.setMinimumSize(QtCore.QSize(0, 85))
        self.fr_buttons_s.setMaximumSize(QtCore.QSize(16777215, 85))
        self.fr_buttons_s.setStyleSheet("background-color: None;")
        self.fr_buttons_s.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_buttons_s.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_buttons_s.setObjectName("fr_buttons_s")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.fr_buttons_s)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.fr_btn_patient_s = QtWidgets.QFrame(parent=self.fr_buttons_s)
        self.fr_btn_patient_s.setMinimumSize(QtCore.QSize(0, 70))
        self.fr_btn_patient_s.setMaximumSize(QtCore.QSize(16777215, 70))
        self.fr_btn_patient_s.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_btn_patient_s.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_btn_patient_s.setObjectName("fr_btn_patient_s")
        self.verticalLayout_33 = QtWidgets.QVBoxLayout(self.fr_btn_patient_s)
        self.verticalLayout_33.setObjectName("verticalLayout_33")
        self.btn_patient_s = QtWidgets.QPushButton(parent=self.fr_btn_patient_s)
        self.btn_patient_s.setMinimumSize(QtCore.QSize(160, 50))
        self.btn_patient_s.setMaximumSize(QtCore.QSize(160, 50))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(13)
        self.btn_patient_s.setFont(font)
        self.btn_patient_s.setStyleSheet("QPushButton {\n"
                                         "background-color: rgb(0, 0, 61);\n"
                                         "color: rgb(255, 255, 255);\n"
                                         "border: 1px solid white;\n"
                                         "border-radius: 10px;\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton:hover {\n"
                                         "background-color: rgb(0, 0, 31);\n"
                                         "color: white;\n"
                                         "}")
        self.btn_patient_s.setObjectName("btn_patient_s")
        self.verticalLayout_33.addWidget(self.btn_patient_s)
        self.horizontalLayout_5.addWidget(self.fr_btn_patient_s, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.fr_btn_inform_s = QtWidgets.QFrame(parent=self.fr_buttons_s)
        self.fr_btn_inform_s.setMinimumSize(QtCore.QSize(0, 70))
        self.fr_btn_inform_s.setMaximumSize(QtCore.QSize(16777215, 70))
        self.fr_btn_inform_s.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_btn_inform_s.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_btn_inform_s.setObjectName("fr_btn_inform_s")
        self.verticalLayout_34 = QtWidgets.QVBoxLayout(self.fr_btn_inform_s)
        self.verticalLayout_34.setObjectName("verticalLayout_34")
        self.btn_inform_s = QtWidgets.QPushButton(parent=self.fr_btn_inform_s)
        self.btn_inform_s.setMinimumSize(QtCore.QSize(160, 50))
        self.btn_inform_s.setMaximumSize(QtCore.QSize(160, 50))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(13)
        self.btn_inform_s.setFont(font)
        self.btn_inform_s.setStyleSheet("QPushButton {\n"
                                        "background-color: rgb(0, 0, 61);\n"
                                        "color: rgb(255, 255, 255);\n"
                                        "border: 1px solid white;\n"
                                        "border-radius: 10px;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:hover {\n"
                                        "background-color: rgb(0, 0, 31);\n"
                                        "color: white;\n"
                                        "}")
        self.btn_inform_s.setObjectName("btn_inform_s")
        self.verticalLayout_34.addWidget(self.btn_inform_s)
        self.horizontalLayout_5.addWidget(self.fr_btn_inform_s, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.fr_btn_model3D_s = QtWidgets.QFrame(parent=self.fr_buttons_s)
        self.fr_btn_model3D_s.setMinimumSize(QtCore.QSize(0, 70))
        self.fr_btn_model3D_s.setMaximumSize(QtCore.QSize(16777215, 70))
        self.fr_btn_model3D_s.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_btn_model3D_s.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_btn_model3D_s.setObjectName("fr_btn_model3D_s")
        self.verticalLayout_35 = QtWidgets.QVBoxLayout(self.fr_btn_model3D_s)
        self.verticalLayout_35.setObjectName("verticalLayout_35")
        self.btn_model3D_s = QtWidgets.QPushButton(parent=self.fr_btn_model3D_s)
        self.btn_model3D_s.setMinimumSize(QtCore.QSize(160, 50))
        self.btn_model3D_s.setMaximumSize(QtCore.QSize(160, 50))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(13)
        self.btn_model3D_s.setFont(font)
        self.btn_model3D_s.setStyleSheet("QPushButton {\n"
                                         "background-color: rgb(0, 0, 61);\n"
                                         "color: rgb(255, 255, 255);\n"
                                         "border: 1px solid white;\n"
                                         "border-radius: 10px;\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton:hover {\n"
                                         "background-color: rgb(0, 0, 31);\n"
                                         "color: white;\n"
                                         "}")
        self.btn_model3D_s.setObjectName("btn_model3D_s")
        self.verticalLayout_35.addWidget(self.btn_model3D_s)
        self.horizontalLayout_5.addWidget(self.fr_btn_model3D_s, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.verticalLayout_12.addWidget(self.fr_buttons_s, 0, QtCore.Qt.AlignmentFlag.AlignBottom)
        self.verticalLayout_11.addWidget(self.fr_salida)
        self.ingresar_patient.addWidget(self.Salida)
        self.citas = QtWidgets.QWidget()
        self.citas.setStyleSheet("")
        self.citas.setObjectName("citas")
        self.horizontalLayout_31 = QtWidgets.QHBoxLayout(self.citas)
        self.horizontalLayout_31.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_31.setSpacing(0)
        self.horizontalLayout_31.setObjectName("horizontalLayout_31")
        self.frame_2 = QtWidgets.QFrame(parent=self.citas)
        self.frame_2.setMinimumSize(QtCore.QSize(300, 0))
        self.frame_2.setMaximumSize(QtCore.QSize(300, 16777215))
        self.frame_2.setStyleSheet("background-color: rgb(0, 0, 31);\n"
                                   "color: white;")
        self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout_46 = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout_46.setObjectName("verticalLayout_46")
        self.frame_3 = QtWidgets.QFrame(parent=self.frame_2)
        self.frame_3.setMinimumSize(QtCore.QSize(0, 150))
        self.frame_3.setMaximumSize(QtCore.QSize(16777215, 150))
        self.frame_3.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout_45 = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout_45.setObjectName("verticalLayout_45")
        self.photo_patient_s_2 = QtWidgets.QLabel(parent=self.frame_3)
        self.photo_patient_s_2.setMinimumSize(QtCore.QSize(80, 80))
        self.photo_patient_s_2.setMaximumSize(QtCore.QSize(80, 80))
        self.photo_patient_s_2.setStyleSheet("border: 5px solid;\n"
                                             "border-radius: 35px;\n"
                                             "border-color: rgb(0, 0, 100);")
        self.photo_patient_s_2.setText("")
        self.photo_patient_s_2.setPixmap(QtGui.QPixmap("images/foto-p.png"))
        self.photo_patient_s_2.setScaledContents(True)
        self.photo_patient_s_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.photo_patient_s_2.setObjectName("photo_patient_s_2")
        self.verticalLayout_45.addWidget(self.photo_patient_s_2, 0,
                                         QtCore.Qt.AlignmentFlag.AlignHCenter | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.verticalLayout_46.addWidget(self.frame_3)
        self.fr_dpatient_cita = QtWidgets.QFrame(parent=self.frame_2)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(11)

        self.fr_dpatient_cita.setFont(font)
        self.fr_dpatient_cita.setStyleSheet("QLineEdit {\n"
                                            "background-color: white;\n"
                                            "border: 3px solid;\n"
                                            "border-color: rgb(227, 227, 227);\n"
                                            "border-radius: 8px;\n"
                                            "color: rgb(0, 0, 61);\n"
                                            "padding-left: 5px;\n"
                                            "}")
        self.fr_dpatient_cita.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_dpatient_cita.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_dpatient_cita.setObjectName("fr_dpatient_cita")
        self.verticalLayout_47 = QtWidgets.QVBoxLayout(self.fr_dpatient_cita)
        self.verticalLayout_47.setContentsMargins(-1, -1, -1, 50)
        self.verticalLayout_47.setObjectName("verticalLayout_47")
        self.lbl_name_c = QtWidgets.QLabel(parent=self.fr_dpatient_cita)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        self.lbl_name_c.setFont(font)
        self.lbl_name_c.setObjectName("lbl_name_c")
        self.verticalLayout_47.addWidget(self.lbl_name_c)
        self.name_cita = QtWidgets.QLineEdit(parent=self.fr_dpatient_cita)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(11)
        self.name_cita.setFont(font)
        self.name_cita.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.name_cita.setReadOnly(True)
        self.name_cita.setObjectName("name_cita")
        self.verticalLayout_47.addWidget(self.name_cita)
        self.lbl_edad_c = QtWidgets.QLabel(parent=self.fr_dpatient_cita)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        self.lbl_edad_c.setFont(font)
        self.lbl_edad_c.setObjectName("lbl_edad_c")
        self.verticalLayout_47.addWidget(self.lbl_edad_c)
        self.edad_cita = QtWidgets.QLineEdit(parent=self.fr_dpatient_cita)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(11)
        self.edad_cita.setFont(font)
        self.edad_cita.setReadOnly(True)
        self.edad_cita.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.edad_cita.setObjectName("edad_cita")
        self.verticalLayout_47.addWidget(self.edad_cita)
        self.lbl_tpatient_c = QtWidgets.QLabel(parent=self.fr_dpatient_cita)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        self.lbl_tpatient_c.setFont(font)
        self.lbl_tpatient_c.setObjectName("lbl_tpatient_c")
        self.verticalLayout_47.addWidget(self.lbl_tpatient_c)
        self.tpaciente_cita = QtWidgets.QLineEdit(parent=self.fr_dpatient_cita)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(11)
        self.tpaciente_cita.setFont(font)
        self.tpaciente_cita.setReadOnly(True)
        self.tpaciente_cita.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.tpaciente_cita.setObjectName("tpaciente_cita")
        self.verticalLayout_47.addWidget(self.tpaciente_cita)
        self.lbl_sexo_c = QtWidgets.QLabel(parent=self.fr_dpatient_cita)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        self.lbl_sexo_c.setFont(font)
        self.lbl_sexo_c.setObjectName("lbl_sexo_c")
        self.verticalLayout_47.addWidget(self.lbl_sexo_c)
        self.sexo_cita = QtWidgets.QLineEdit(parent=self.fr_dpatient_cita)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(11)
        self.sexo_cita.setFont(font)
        self.sexo_cita.setReadOnly(True)
        self.sexo_cita.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.sexo_cita.setObjectName("sexo_cita")
        self.verticalLayout_47.addWidget(self.sexo_cita)
        self.lbl_pais_c = QtWidgets.QLabel(parent=self.fr_dpatient_cita)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        self.lbl_pais_c.setFont(font)
        self.lbl_pais_c.setObjectName("lbl_pais_c")
        self.verticalLayout_47.addWidget(self.lbl_pais_c)
        self.pais_cita = QtWidgets.QLineEdit(parent=self.fr_dpatient_cita)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(11)
        self.pais_cita.setFont(font)
        self.pais_cita.setReadOnly(True)
        self.pais_cita.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.pais_cita.setObjectName("pais_cita")
        self.verticalLayout_47.addWidget(self.pais_cita)
        self.verticalLayout_46.addWidget(self.fr_dpatient_cita)
        self.horizontalLayout_31.addWidget(self.frame_2)
        self.fr_content_citas = QtWidgets.QFrame(parent=self.citas)
        self.fr_content_citas.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_content_citas.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_content_citas.setObjectName("fr_content_citas")
        self.verticalLayout_43 = QtWidgets.QVBoxLayout(self.fr_content_citas)
        self.verticalLayout_43.setObjectName("verticalLayout_43")
        self.fr_fecha_hora_c = QtWidgets.QFrame(parent=self.fr_content_citas)
        self.fr_fecha_hora_c.setMinimumSize(QtCore.QSize(0, 60))
        self.fr_fecha_hora_c.setMaximumSize(QtCore.QSize(16777215, 60))
        self.fr_fecha_hora_c.setStyleSheet("background-color: white;\n"
                                           "border-color: rgb(0, 0, 61);\n"
                                           "border: 3px solid;\n"
                                           "border-radius: 5px;")
        self.fr_fecha_hora_c.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_fecha_hora_c.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_fecha_hora_c.setObjectName("fr_fecha_hora_c")
        self.verticalLayout_50 = QtWidgets.QVBoxLayout(self.fr_fecha_hora_c)
        self.verticalLayout_50.setObjectName("verticalLayout_50")
        self.lbl_fecha_hora = QtWidgets.QLabel(parent=self.fr_fecha_hora_c)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(11)
        self.lbl_fecha_hora.setFont(font)
        self.lbl_fecha_hora.setStyleSheet("border: 0px solid;")
        self.lbl_fecha_hora.setObjectName("lbl_fecha_hora")
        self.verticalLayout_50.addWidget(self.lbl_fecha_hora)
        self.verticalLayout_43.addWidget(self.fr_fecha_hora_c)
        self.fr_tcitas = QtWidgets.QFrame(parent=self.fr_content_citas)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred,
                                           QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fr_tcitas.sizePolicy().hasHeightForWidth())
        self.fr_tcitas.setSizePolicy(sizePolicy)
        self.fr_tcitas.setStyleSheet("QLineEdit {\n"
                                     "border: 3px solid;\n"
                                     "border-color: rgb(0, 0, 61);\n"
                                     "border-bottom-left-radius: 5px;\n"
                                     "border-bottom-right-radius: 5px;\n"
                                     "}\n"
                                     "\n"
                                     "QLabel {\n"
                                     "border-top-left-radius: 5px;\n"
                                     "border-top-right-radius: 5px;\n"
                                     "color: white;\n"
                                     "background-color: rgb(0, 0, 61);\n"
                                     "}")
        self.fr_tcitas.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_tcitas.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_tcitas.setObjectName("fr_tcitas")
        self.horizontalLayout_33 = QtWidgets.QHBoxLayout(self.fr_tcitas)
        self.horizontalLayout_33.setContentsMargins(0, 9, 0, 9)
        self.horizontalLayout_33.setSpacing(0)
        self.horizontalLayout_33.setObjectName("horizontalLayout_33")
        self.table_citas = QtWidgets.QTableWidget(parent=self.fr_tcitas)
        self.table_citas.setStyleSheet("QTableWidget {\n"
                                       "background-color: white;\n"
                                       "border-color: rgb(0, 0, 61);\n"
                                       "border: 3px solid;\n"
                                       "border-radius: 5px;\n"
                                       "}")
        self.table_citas.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.table_citas.setAlternatingRowColors(True)
        self.table_citas.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.SingleSelection)
        self.table_citas.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior.SelectRows)
        self.table_citas.setHorizontalScrollMode(QtWidgets.QAbstractItemView.ScrollMode.ScrollPerItem)
        self.table_citas.setObjectName("table_citas")
        self.table_citas.setRowCount(1)
        self.table_citas.setColumnCount(4)
        item = QtWidgets.QTableWidgetItem()
        self.table_citas.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_citas.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_citas.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_citas.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_citas.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_citas.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_citas.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_citas.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_citas.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        font.setBold(True)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        item.setFlags(
            QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
        self.table_citas.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        self.table_citas.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        self.table_citas.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        self.table_citas.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        self.table_citas.setItem(1, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Circular Std")
        font.setPointSize(10)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 61))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        item.setForeground(brush)
        self.table_citas.setItem(1, 4, item)
        self.table_citas.horizontalHeader().setVisible(False)
        self.table_citas.horizontalHeader().setDefaultSectionSize(127)
        self.table_citas.verticalHeader().setVisible(False)
        self.horizontalLayout_33.addWidget(self.table_citas)
        self.verticalLayout_43.addWidget(self.fr_tcitas)
        self.fr_btn_citas = QtWidgets.QFrame(parent=self.fr_content_citas)
        self.fr_btn_citas.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.fr_btn_citas.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.fr_btn_citas.setObjectName("fr_btn_citas")
        self.horizontalLayout_32 = QtWidgets.QHBoxLayout(self.fr_btn_citas)
        self.horizontalLayout_32.setObjectName("horizontalLayout_32")
        self.btn_volver_patient_cita = QtWidgets.QPushButton(parent=self.fr_btn_citas)
        self.btn_volver_patient_cita.setMinimumSize(QtCore.QSize(150, 50))
        self.btn_volver_patient_cita.setMaximumSize(QtCore.QSize(150, 50))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(12)
        self.btn_volver_patient_cita.setFont(font)
        self.btn_volver_patient_cita.setStyleSheet("QPushButton {\n"
                                                   "background-color: rgb(0, 0, 61);\n"
                                                   "color: rgb(255, 255, 255);\n"
                                                   "border: 1px solid white;\n"
                                                   "border-radius: 10px;\n"
                                                   "}\n"
                                                   "\n"
                                                   "QPushButton:hover {\n"
                                                   "background-color: rgb(0, 0, 31);\n"
                                                   "color: white;\n"
                                                   "}")
        self.btn_volver_patient_cita.setObjectName("btn_volver_patient_cita")
        self.horizontalLayout_32.addWidget(self.btn_volver_patient_cita)
        self.btn_agregar_cita = QtWidgets.QPushButton(parent=self.fr_btn_citas)
        self.btn_agregar_cita.setMinimumSize(QtCore.QSize(150, 50))
        self.btn_agregar_cita.setMaximumSize(QtCore.QSize(150, 50))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(12)
        self.btn_agregar_cita.setFont(font)
        self.btn_agregar_cita.setStyleSheet("QPushButton {\n"
                                            "background-color: rgb(0, 0, 61);\n"
                                            "color: rgb(255, 255, 255);\n"
                                            "border: 1px solid white;\n"
                                            "border-radius: 10px;\n"
                                            "}\n"
                                            "\n"
                                            "QPushButton:hover {\n"
                                            "background-color: rgb(0, 0, 31);\n"
                                            "color: white;\n"
                                            "}")
        self.btn_agregar_cita.setObjectName("btn_agregar_cita")
        self.horizontalLayout_32.addWidget(self.btn_agregar_cita)
        self.btn_verinfo_cita = QtWidgets.QPushButton(parent=self.fr_btn_citas)
        self.btn_verinfo_cita.setMinimumSize(QtCore.QSize(150, 50))
        self.btn_verinfo_cita.setMaximumSize(QtCore.QSize(150, 50))
        font = QtGui.QFont()
        font.setFamily("Circular Std Book")
        font.setPointSize(12)
        self.btn_verinfo_cita.setFont(font)
        self.btn_verinfo_cita.setStyleSheet("QPushButton {\n"
                                            "background-color: rgb(0, 0, 61);\n"
                                            "color: rgb(255, 255, 255);\n"
                                            "border: 1px solid white;\n"
                                            "border-radius: 10px;\n"
                                            "}\n"
                                            "\n"
                                            "QPushButton:hover {\n"
                                            "background-color: rgb(0, 0, 31);\n"
                                            "color: white;\n"
                                            "}")
        self.btn_verinfo_cita.setObjectName("btn_verinfo_cita")
        self.horizontalLayout_32.addWidget(self.btn_verinfo_cita)
        self.verticalLayout_43.addWidget(self.fr_btn_citas, 0, QtCore.Qt.AlignmentFlag.AlignBottom)
        self.horizontalLayout_31.addWidget(self.fr_content_citas)
        self.ingresar_patient.addWidget(self.citas)
        self.verticalLayout_22.addWidget(self.ingresar_patient)
        self.content_patient.addWidget(self.data_patient)
        self.analytics = QtWidgets.QWidget()
        self.analytics.setStyleSheet("#first_data {\n"
                                     "border: 2.5px solid;\n"
                                     "border-color: rgb(0, 0, 61);\n"
                                     "border-radius: 5px;\n"
                                     "}\n"
                                     "\n"
                                     "#date_data {\n"
                                     "border: 2.5px solid;\n"
                                     "border-color: rgb(0, 0, 61);\n"
                                     "border-radius: 5px;\n"
                                     "}\n"
                                     "\n"
                                     "#second_data {\n"
                                     "border: 2.5px solid;\n"
                                     "border-color: rgb(0, 0, 61);\n"
                                     "border-radius: 5px;\n"
                                     "}")
        self.analytics.setObjectName("analytics")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.analytics)
        self.verticalLayout_7.setSpacing(10)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.content_patient.addWidget(self.analytics)
        self.verticalLayout_6.addWidget(self.content_patient)
        self.content.addWidget(self.Paciente)
        self.Estadistica_paciente = QtWidgets.QWidget()
        self.Estadistica_paciente.setObjectName("Estadistica_paciente")
        self.content.addWidget(self.Estadistica_paciente)
        self.Model3D = QtWidgets.QWidget()
        self.Model3D.setStyleSheet("")
        self.Model3D.setObjectName("Model3D")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.Model3D)
        self.horizontalLayout_8.setContentsMargins(1, 0, 0, 0)
        self.horizontalLayout_8.setSpacing(0)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.frame_contenedor_izquierda = QtWidgets.QFrame(parent=self.Model3D)
        self.frame_contenedor_izquierda.setStyleSheet("background-color: rgb(27, 38, 59);\n"
                                                      "font: 650 10pt \"Roboto\";\n"
                                                      "color: white;\n"
                                                      "border: 1px solid rgb(27, 38, 59);\n"
                                                      "")
        self.frame_contenedor_izquierda.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.frame_contenedor_izquierda.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_contenedor_izquierda.setObjectName("frame_contenedor_izquierda")
        self.lbl_foto = QtWidgets.QLabel(parent=self.frame_contenedor_izquierda)
        self.lbl_foto.setGeometry(QtCore.QRect(92, 50, 91, 91))
        self.lbl_foto.setStyleSheet("border: 1px solid black;\n"
                                    "border-radius: 600")
        self.lbl_foto.setText("")
        self.lbl_foto.setPixmap(QtGui.QPixmap("images/foto-p.png"))
        self.lbl_foto.setScaledContents(True)
        self.lbl_foto.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_foto.setObjectName("lbl_foto")
        self.lbl_nombre = QtWidgets.QLabel(parent=self.frame_contenedor_izquierda)
        self.lbl_nombre.setGeometry(QtCore.QRect(64, 150, 141, 31))
        self.lbl_nombre.setStyleSheet("color: white;\n"
                                      "font: 650 10.5pt \"Roboto\";")
        self.lbl_nombre.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lbl_nombre.setObjectName("lbl_nombre")
        self.btn_tipo_paciente = QtWidgets.QPushButton(parent=self.frame_contenedor_izquierda)
        self.btn_tipo_paciente.setGeometry(QtCore.QRect(100, 187, 71, 21))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(False)
        self.btn_tipo_paciente.setFont(font)
        self.btn_tipo_paciente.setStyleSheet("background-color: rgb(154, 154, 231);\n"
                                             "color: white;\n"
                                             "border: 1px solid rgb(154, 154, 231);\n"
                                             "border-radius: 7;\n"
                                             "font: 700 9pt \"Roboto\";")
        self.btn_tipo_paciente.setObjectName("btn_tipo_paciente")
        self.lbl_linea = QtWidgets.QLabel(parent=self.frame_contenedor_izquierda)
        self.lbl_linea.setGeometry(QtCore.QRect(30, 210, 221, 20))
        self.lbl_linea.setStyleSheet("border-bottom: 1px solid gray;\n"
                                     "border-radius: 0")
        self.lbl_linea.setText("")
        self.lbl_linea.setObjectName("lbl_linea")
        self.lbl_info = QtWidgets.QLabel(parent=self.frame_contenedor_izquierda)
        self.lbl_info.setGeometry(QtCore.QRect(70, 236, 141, 31))
        self.lbl_info.setStyleSheet("color: white;\n"
                                    "font: 750 10pt \"Roboto\";")
        self.lbl_info.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignLeading | QtCore.Qt.AlignmentFlag.AlignLeft | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.lbl_info.setObjectName("lbl_info")
        self.frame_2 = QtWidgets.QFrame(parent=self.frame_contenedor_izquierda)
        self.frame_2.setGeometry(QtCore.QRect(70, 282, 181, 33))
        self.frame_2.setStyleSheet("font: 750 9pt \"Roboto\";")
        self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout_10.setContentsMargins(2, 1, -1, 0)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.lbl_desc1 = QtWidgets.QLabel(parent=self.frame_2)
        self.lbl_desc1.setStyleSheet("font: 650 9pt \"Roboto\";\n"
                                     "color: rgb(207, 207, 207);")
        self.lbl_desc1.setObjectName("lbl_desc1")
        self.verticalLayout_10.addWidget(self.lbl_desc1)
        self.lbl_fecha = QtWidgets.QLabel(parent=self.frame_2)
        self.lbl_fecha.setStyleSheet("font: 750 9pt \"Roboto\";")
        self.lbl_fecha.setObjectName("lbl_fecha")
        self.verticalLayout_10.addWidget(self.lbl_fecha)
        self.ico_fecha = QtWidgets.QLabel(parent=self.frame_contenedor_izquierda)
        self.ico_fecha.setGeometry(QtCore.QRect(30, 280, 36, 36))
        self.ico_fecha.setStyleSheet("border: 1px solid rgba(0, 232, 159, 0.4);\n"
                                     "border-radius: 18;\n"
                                     "background-color: rgba(0, 232, 159, 0.2);")
        self.ico_fecha.setText("")
        self.ico_fecha.setPixmap(QtGui.QPixmap("icons/calendar.svg"))
        self.ico_fecha.setScaledContents(True)
        self.ico_fecha.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.ico_fecha.setIndent(-9)
        self.ico_fecha.setMargin(7)
        self.ico_fecha.setObjectName("ico_fecha")
        self.ico_documento = QtWidgets.QLabel(parent=self.frame_contenedor_izquierda)
        self.ico_documento.setGeometry(QtCore.QRect(30, 337, 36, 36))
        self.ico_documento.setStyleSheet("border: 1px solid  rgba(216, 160, 15, 0.4);\n"
                                         "border-radius: 18;\n"
                                         "background-color: rgba(216, 160, 15, 0.2);")
        self.ico_documento.setText("")
        self.ico_documento.setPixmap(QtGui.QPixmap("icons/document.svg"))
        self.ico_documento.setScaledContents(True)
        self.ico_documento.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.ico_documento.setIndent(-9)
        self.ico_documento.setMargin(7)
        self.ico_documento.setObjectName("ico_documento")
        self.frame_4 = QtWidgets.QFrame(parent=self.frame_contenedor_izquierda)
        self.frame_4.setGeometry(QtCore.QRect(70, 338, 181, 33))
        self.frame_4.setStyleSheet("font: 750 9pt \"Roboto\";")
        self.frame_4.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout_43 = QtWidgets.QVBoxLayout(self.frame_4)
        self.verticalLayout_43.setContentsMargins(2, 1, -1, 0)
        self.verticalLayout_43.setObjectName("verticalLayout_43")
        self.lbl_desc2 = QtWidgets.QLabel(parent=self.frame_4)
        self.lbl_desc2.setStyleSheet("font: 650 9pt \"Roboto\";\n"
                                     "color: rgb(207, 207, 207);")
        self.lbl_desc2.setObjectName("lbl_desc2")
        self.verticalLayout_43.addWidget(self.lbl_desc2)
        self.lbl_documento = QtWidgets.QLabel(parent=self.frame_4)
        self.lbl_documento.setStyleSheet("font: 750 9pt \"Roboto\";")
        self.lbl_documento.setObjectName("lbl_documento")
        self.verticalLayout_43.addWidget(self.lbl_documento)
        self.ico_edad = QtWidgets.QLabel(parent=self.frame_contenedor_izquierda)
        self.ico_edad.setGeometry(QtCore.QRect(30, 394, 36, 36))
        self.ico_edad.setStyleSheet("border: 1px solid rgba(0, 91, 186, 0.4);\n"
                                    "border-radius: 18;\n"
                                    "background-color: rgba(0, 91, 186, 0.2);")
        self.ico_edad.setText("")
        self.ico_edad.setPixmap(QtGui.QPixmap("icons/age.svg"))
        self.ico_edad.setScaledContents(True)
        self.ico_edad.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.ico_edad.setIndent(-9)
        self.ico_edad.setMargin(7)
        self.ico_edad.setObjectName("ico_edad")
        self.frame_5 = QtWidgets.QFrame(parent=self.frame_contenedor_izquierda)
        self.frame_5.setGeometry(QtCore.QRect(70, 397, 181, 33))
        self.frame_5.setStyleSheet("font: 750 9pt \"Roboto\";")
        self.frame_5.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_5.setObjectName("frame_5")
        self.verticalLayout_44 = QtWidgets.QVBoxLayout(self.frame_5)
        self.verticalLayout_44.setContentsMargins(2, 1, -1, 0)
        self.verticalLayout_44.setObjectName("verticalLayout_44")
        self.lbl_desc3 = QtWidgets.QLabel(parent=self.frame_5)
        self.lbl_desc3.setStyleSheet("font: 650 9pt \"Roboto\";\n"
                                     "color: rgb(207, 207, 207);")
        self.lbl_desc3.setObjectName("lbl_desc3")
        self.verticalLayout_44.addWidget(self.lbl_desc3)
        self.lbl_edad = QtWidgets.QLabel(parent=self.frame_5)
        self.lbl_edad.setStyleSheet("font: 750 9pt \"Roboto\";")
        self.lbl_edad.setObjectName("lbl_edad")
        self.verticalLayout_44.addWidget(self.lbl_edad)
        self.ico_peso = QtWidgets.QLabel(parent=self.frame_contenedor_izquierda)
        self.ico_peso.setGeometry(QtCore.QRect(30, 452, 36, 36))
        self.ico_peso.setStyleSheet("border: 1px solid rgba(109, 87, 222, 0.2);\n"
                                    "border-radius: 18;\n"
                                    "background-color: rgba(109, 87, 222, 0.2);")
        self.ico_peso.setText("")
        self.ico_peso.setPixmap(QtGui.QPixmap("icons/weight.svg"))
        self.ico_peso.setScaledContents(True)
        self.ico_peso.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.ico_peso.setIndent(-9)
        self.ico_peso.setMargin(7)
        self.ico_peso.setObjectName("ico_peso")
        self.frame_6 = QtWidgets.QFrame(parent=self.frame_contenedor_izquierda)
        self.frame_6.setGeometry(QtCore.QRect(70, 456, 181, 33))
        self.frame_6.setStyleSheet("font: 750 9pt \"Roboto\";")
        self.frame_6.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_6.setObjectName("frame_6")
        self.verticalLayout_45 = QtWidgets.QVBoxLayout(self.frame_6)
        self.verticalLayout_45.setContentsMargins(2, 0, -1, 1)
        self.verticalLayout_45.setObjectName("verticalLayout_45")
        self.lbl_desc4 = QtWidgets.QLabel(parent=self.frame_6)
        self.lbl_desc4.setStyleSheet("font: 650 9pt \"Roboto\";\n"
                                     "color: rgb(207, 207, 207);")
        self.lbl_desc4.setObjectName("lbl_desc4")
        self.verticalLayout_45.addWidget(self.lbl_desc4)
        self.lbl_peso = QtWidgets.QLabel(parent=self.frame_6)
        self.lbl_peso.setStyleSheet("font: 750 9pt \"Roboto\";")
        self.lbl_peso.setObjectName("lbl_peso")
        self.verticalLayout_45.addWidget(self.lbl_peso)
        self.ico_estatura = QtWidgets.QLabel(parent=self.frame_contenedor_izquierda)
        self.ico_estatura.setGeometry(QtCore.QRect(30, 512, 36, 36))
        self.ico_estatura.setStyleSheet("border: 1px solid rgba(222, 38, 136, 0.4);\n"
                                        "border-radius: 18;\n"
                                        "background-color: rgba(222, 38, 136, 0.2);")
        self.ico_estatura.setText("")
        self.ico_estatura.setPixmap(QtGui.QPixmap("icons/height.svg"))
        self.ico_estatura.setScaledContents(True)
        self.ico_estatura.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.ico_estatura.setIndent(-9)
        self.ico_estatura.setMargin(7)
        self.ico_estatura.setObjectName("ico_estatura")
        self.frame_7 = QtWidgets.QFrame(parent=self.frame_contenedor_izquierda)
        self.frame_7.setGeometry(QtCore.QRect(70, 514, 181, 33))
        self.frame_7.setStyleSheet("font: 750 9pt \"Roboto\";")
        self.frame_7.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_7.setObjectName("frame_7")
        self.verticalLayout_46 = QtWidgets.QVBoxLayout(self.frame_7)
        self.verticalLayout_46.setContentsMargins(2, 1, -1, 0)
        self.verticalLayout_46.setObjectName("verticalLayout_46")
        self.lbl_desc5 = QtWidgets.QLabel(parent=self.frame_7)
        self.lbl_desc5.setStyleSheet("font: 650 9pt \"Roboto\";\n"
                                     "color: rgb(207, 207, 207);")
        self.lbl_desc5.setObjectName("lbl_desc5")
        self.verticalLayout_46.addWidget(self.lbl_desc5)
        self.lbl_estatura = QtWidgets.QLabel(parent=self.frame_7)
        self.lbl_estatura.setStyleSheet("font: 750 9pt \"Roboto\";")
        self.lbl_estatura.setObjectName("lbl_estatura")
        self.verticalLayout_46.addWidget(self.lbl_estatura)
        self.frame_8 = QtWidgets.QFrame(parent=self.frame_contenedor_izquierda)
        self.frame_8.setGeometry(QtCore.QRect(70, 572, 181, 33))
        self.frame_8.setStyleSheet("font: 750 9pt \"Roboto\";")
        self.frame_8.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_8.setObjectName("frame_8")
        self.verticalLayout_47 = QtWidgets.QVBoxLayout(self.frame_8)
        self.verticalLayout_47.setContentsMargins(2, 1, -1, 0)
        self.verticalLayout_47.setObjectName("verticalLayout_47")
        self.lbl_desc6 = QtWidgets.QLabel(parent=self.frame_8)
        self.lbl_desc6.setStyleSheet("font: 650 9pt \"Roboto\";\n"
                                     "color: rgb(207, 207, 207);")
        self.lbl_desc6.setObjectName("lbl_desc6")
        self.verticalLayout_47.addWidget(self.lbl_desc6)
        self.lbl_telefono = QtWidgets.QLabel(parent=self.frame_8)
        self.lbl_telefono.setStyleSheet("font: 750 9pt \"Roboto\";")
        self.lbl_telefono.setObjectName("lbl_telefono")
        self.verticalLayout_47.addWidget(self.lbl_telefono)
        self.ico_telefono = QtWidgets.QLabel(parent=self.frame_contenedor_izquierda)
        self.ico_telefono.setGeometry(QtCore.QRect(30, 570, 36, 36))
        self.ico_telefono.setStyleSheet("border: 1px solid rgba(198, 87, 59, 0.2);\n"
                                        "border-radius: 18;\n"
                                        "background-color: rgba(198, 87, 59, 0.2);")
        self.ico_telefono.setText("")
        self.ico_telefono.setPixmap(QtGui.QPixmap("icons/phone.svg"))
        self.ico_telefono.setScaledContents(True)
        self.ico_telefono.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.ico_telefono.setIndent(-9)
        self.ico_telefono.setMargin(7)
        self.ico_telefono.setObjectName("ico_telefono")
        self.frame_9 = QtWidgets.QFrame(parent=self.frame_contenedor_izquierda)
        self.frame_9.setGeometry(QtCore.QRect(220, 773, 181, 31))
        self.frame_9.setStyleSheet("font: 750 9pt \"Roboto\";")
        self.frame_9.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_9.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_9.setObjectName("frame_9")
        self.verticalLayout_48 = QtWidgets.QVBoxLayout(self.frame_9)
        self.verticalLayout_48.setContentsMargins(2, 1, -1, 0)
        self.verticalLayout_48.setObjectName("verticalLayout_48")
        self.label_26 = QtWidgets.QLabel(parent=self.frame_9)
        self.label_26.setStyleSheet("font: 650 9pt \"Roboto\";\n"
                                    "color: rgb(207, 207, 207);")
        self.label_26.setObjectName("label_26")
        self.verticalLayout_48.addWidget(self.label_26)
        self.label_27 = QtWidgets.QLabel(parent=self.frame_9)
        self.label_27.setStyleSheet("font: 750 9pt \"Roboto\";")
        self.label_27.setObjectName("label_27")
        self.verticalLayout_48.addWidget(self.label_27)
        self.label_28 = QtWidgets.QLabel(parent=self.frame_contenedor_izquierda)
        self.label_28.setGeometry(QtCore.QRect(180, 770, 36, 36))
        self.label_28.setStyleSheet("border: 1px solid rgba(0, 232, 159, 0.4);\n"
                                    "border-radius: 18;\n"
                                    "background-color: rgba(0, 232, 159, 0.2);")
        self.label_28.setText("")
        self.label_28.setPixmap(QtGui.QPixmap("icons/calendar.svg"))
        self.label_28.setScaledContents(True)
        self.label_28.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_28.setIndent(-9)
        self.label_28.setObjectName("label_28")
        self.frame_10 = QtWidgets.QFrame(parent=self.frame_contenedor_izquierda)
        self.frame_10.setGeometry(QtCore.QRect(70, 628, 181, 33))
        self.frame_10.setStyleSheet("font: 750 9pt \"Roboto\";")
        self.frame_10.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_10.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_10.setObjectName("frame_10")
        self.verticalLayout_55 = QtWidgets.QVBoxLayout(self.frame_10)
        self.verticalLayout_55.setContentsMargins(2, 1, -1, 0)
        self.verticalLayout_55.setObjectName("verticalLayout_55")
        self.lbl_desc7 = QtWidgets.QLabel(parent=self.frame_10)
        self.lbl_desc7.setStyleSheet("font: 650 9pt \"Roboto\";\n"
                                     "color: rgb(207, 207, 207);\n"
                                     "")
        self.lbl_desc7.setObjectName("lbl_desc7")
        self.verticalLayout_55.addWidget(self.lbl_desc7)
        self.lbl_actividad_fisica = QtWidgets.QLabel(parent=self.frame_10)
        self.lbl_actividad_fisica.setStyleSheet("font: 750 9pt \"Roboto\";")
        self.lbl_actividad_fisica.setObjectName("lbl_actividad_fisica")
        self.verticalLayout_55.addWidget(self.lbl_actividad_fisica)
        self.ico_actividad = QtWidgets.QLabel(parent=self.frame_contenedor_izquierda)
        self.ico_actividad.setGeometry(QtCore.QRect(30, 626, 36, 36))
        self.ico_actividad.setStyleSheet("border: 1px solid rgba(58, 141, 123, 0.4);\n"
                                         "border-radius: 18;\n"
                                         "background-color: rgba(58, 141, 123, 0.2);")
        self.ico_actividad.setText("")
        self.ico_actividad.setPixmap(QtGui.QPixmap("icons/fitness.svg"))
        self.ico_actividad.setScaledContents(True)
        self.ico_actividad.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.ico_actividad.setIndent(-9)
        self.ico_actividad.setMargin(7)
        self.ico_actividad.setObjectName("ico_actividad")
        self.horizontalLayout_8.addWidget(self.frame_contenedor_izquierda)
        self.frame_visor3d = QtWidgets.QFrame(parent=self.Model3D)
        self.frame_visor3d.setStyleSheet("")
        self.frame_visor3d.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_visor3d.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_visor3d.setObjectName("frame_visor3d")
        self.verticalLayout_frame3d = QtWidgets.QVBoxLayout(self.frame_visor3d)
        self.verticalLayout_frame3d.setObjectName("verticalLayout_frame3d")
        self.horizontalLayout_8.addWidget(self.frame_visor3d)
        self.horizontalLayout_8.setStretch(0, 3)
        self.horizontalLayout_8.setStretch(1, 10)
        self.content.addWidget(self.Model3D)
        self.visor_3d = None
        self.p = None
        self.Export = QtWidgets.QWidget()
        self.Export.setObjectName("Export")
        self.content.addWidget(self.Export)
        self.Import = QtWidgets.QWidget()
        self.Import.setObjectName("Import")
        self.content.addWidget(self.Import)
        self.Creditos = QtWidgets.QWidget()
        self.Creditos.setObjectName("Creditos")
        self.content.addWidget(self.Creditos)
        self.horizontalLayout.addWidget(self.content)
        self.verticalLayout.addWidget(self.mainwindow)
        self.row_update_cita = 0
        MainWindow.setCentralWidget(self.centralwidget)
        self.script_path = './scripts/script_blender.py'
        self.blender_path = 'c:/Program Files/Blender Foundation/Blender 3.4/blender.exe'
        self.model_path = './test/exported_model.obj'
        self.json_path = './scripts/datos_modelo.json'
        self.retranslateUi(MainWindow)
        self.content.setCurrentIndex(0)
        self.content_patient.setCurrentIndex(0)
        self.ingresar_patient.setCurrentIndex(0)
        self.pag_connection()
        self.strech_table()

    def retranslateUi(self, MainWindow):
        self.visor3d = None
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.lbl_name_program.setText(_translate("MainWindow", "Project RVR"))
        self.btn_menu.setText(_translate("MainWindow", "  Menú"))
        self.btn_paciente.setText(_translate("MainWindow", "  Paciente"))
        self.btn_estadistica_patient.setText(_translate("MainWindow", "  Estadísticas del Paciente"))
        self.btn_model3D.setText(_translate("MainWindow", "  Modelo 3D"))
        self.btn_db.setText(_translate("MainWindow", "  Base de Datos"))
        self.btn_creditos.setText(_translate("MainWindow", "   Créditos"))
        self.lbl_inicio.setText(_translate("MainWindow", "(Logo)"))
        self.lbl_tablep.setText(_translate("MainWindow", "Lista de Pacientes"))
        item = self.table_patient.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Nombre Completo"))
        item = self.table_patient.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Documento"))
        item = self.table_patient.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Tipo de Paciente"))
        item = self.table_patient.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Sexo"))
        item = self.table_patient.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "País"))
        item = self.table_patient.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Opción"))
        __sortingEnabled = self.table_patient.isSortingEnabled()
        self.table_patient.setSortingEnabled(False)
        item = self.table_patient.item(0, 0)
        item.setText(_translate("MainWindow", "Nombre Completo"))
        item = self.table_patient.item(0, 1)
        item.setText(_translate("MainWindow", "Documento"))
        item = self.table_patient.item(0, 2)
        item.setText(_translate("MainWindow", "Tipo de Paciente"))
        item = self.table_patient.item(0, 3)
        item.setText(_translate("MainWindow", "Sexo"))
        item = self.table_patient.item(0, 4)
        item.setText(_translate("MainWindow", "País"))
        item = self.table_patient.item(0, 5)
        item.setText(_translate("MainWindow", "Opción"))
        self.content_table_patient()
        self.table_patient.setSortingEnabled(__sortingEnabled)
        self.btn_add.setText(_translate("MainWindow", " Agregar paciente"))
        self.label_4.setText(_translate("MainWindow", "Información General para el Registro:"))
        self.name.setPlaceholderText(_translate("MainWindow", "  Nombre"))
        self.apellido.setPlaceholderText(_translate("MainWindow", "  Apellido"))
        self.tipo_pac.setPlaceholderText(_translate("MainWindow", "Tipo de Paciente"))
        self.tipo_pac.setItemText(0, _translate("MainWindow", "Adulto"))
        self.tipo_pac.setItemText(1, _translate("MainWindow", "Atleta"))
        self.sexo.setPlaceholderText(_translate("MainWindow", "Género"))
        self.sexo.setItemText(0, _translate("MainWindow", "Hombre"))
        self.sexo.setItemText(1, _translate("MainWindow", "Mujer"))
        self.fnacimiento.setDisplayFormat(_translate("MainWindow", "dd/MM/yyyy"))
        self.act_deporte.setPlaceholderText(_translate("MainWindow", "  Deportes y Actividades Fisicas"))
        self.btn_subir_foto.setText(_translate("MainWindow", "Subir Foto"))
        self.label_5.setText(_translate("MainWindow", "Detalles de Contacto"))
        self.country.setPlaceholderText(_translate("MainWindow", "País"))
        self.country.setItemText(0, _translate("MainWindow", "Venezuela"))
        self.documento.setPlaceholderText(_translate("MainWindow", "Documento"))
        self.tipo_doc.setPlaceholderText(_translate("MainWindow", "---"))
        self.tipo_doc.setItemText(0, _translate("MainWindow", "CI"))
        self.correo.setPlaceholderText(_translate("MainWindow", "Correo"))
        self.direccion.setPlaceholderText(_translate("MainWindow", "Dirección"))
        self.btn_sigR1.setText(_translate("MainWindow", "REGISTRAR"))
        self.code_country.setPlaceholderText(_translate("MainWindow", "---"))
        self.code_country.setItemText(0, _translate("MainWindow", "+58"))
        self.telf.setPlaceholderText(_translate("MainWindow", "Télefono"))
        __sortingEnabled = self.table_medidas.isSortingEnabled()
        self.table_medidas.setSortingEnabled(False)
        self.table_medidas.setSortingEnabled(False)
        item = self.table_medidas.item(0, 0)
        item.setText(_translate("MainWindow", "Tipo de medida"))
        item = self.table_medidas.item(0, 1)
        item.setText(_translate("MainWindow", "Medida 1"))
        item = self.table_medidas.item(0, 2)
        item.setText(_translate("MainWindow", "Medida 2"))
        item = self.table_medidas.item(0, 3)
        item.setText(_translate("MainWindow", "Medida 3"))
        item = self.table_medidas.item(0, 4)
        item.setText(_translate("MainWindow", "Final"))
        item = self.table_medidas.item(1, 0)
        item.setText(_translate("MainWindow", "Estatura (Metros)"))
        item = self.table_medidas.item(2, 0)
        item.setText(_translate("MainWindow", "Peso (Kg)"))
        item = self.table_medidas.item(3, 0)
        item.setText(_translate("MainWindow", "Profundidad Abdominal (cm)"))
        self.table_medidas.setSortingEnabled(__sortingEnabled)
        self.lbl_pliegues_cut.setText(_translate("MainWindow", "Pliegues Cutáneos"))
        self.lbl_fecha.setText(_translate("MainWindow", "Fecha:"))
        self.lbl_name_patient_medidas.setText(_translate("MainWindow", "Paciente:"))
        self.lbl_hora.setText(_translate("MainWindow", "Hora:"))
        __sortingEnabled = self.table_pliegues_cut.isSortingEnabled()
        self.table_pliegues_cut.setSortingEnabled(False)
        item = self.table_pliegues_cut.item(0, 0)
        item.setText(_translate("MainWindow", "Tipo de medida"))
        item = self.table_pliegues_cut.item(0, 1)
        item.setText(_translate("MainWindow", "Medida 1"))
        item = self.table_pliegues_cut.item(0, 2)
        item.setText(_translate("MainWindow", "Medida 2"))
        item = self.table_pliegues_cut.item(0, 3)
        item.setText(_translate("MainWindow", "Medida 3"))
        item = self.table_pliegues_cut.item(0, 4)
        item.setText(_translate("MainWindow", "Final"))
        item = self.table_pliegues_cut.item(1, 0)
        item.setText(_translate("MainWindow", "Triceps (mm)"))
        item = self.table_pliegues_cut.item(2, 0)
        item.setText(_translate("MainWindow", "Subescapular (mm)"))
        item = self.table_pliegues_cut.item(3, 0)
        item.setText(_translate("MainWindow", "Biceps (mm)"))
        item = self.table_pliegues_cut.item(4, 0)
        item.setText(_translate("MainWindow", "Cresta Iliaca (mm)"))
        self.table_pliegues_cut.setSortingEnabled(__sortingEnabled)
        __sortingEnabled = self.table_perife_circun.isSortingEnabled()
        self.table_perife_circun.setSortingEnabled(False)
        item = self.table_perife_circun.item(0, 0)
        item.setText(_translate("MainWindow", "Tipo de medida"))
        item = self.table_perife_circun.item(0, 1)
        item.setText(_translate("MainWindow", "Medida 1"))
        item = self.table_perife_circun.item(0, 2)
        item.setText(_translate("MainWindow", "Medida 2"))
        item = self.table_perife_circun.item(0, 3)
        item.setText(_translate("MainWindow", "Medida 3"))
        item = self.table_perife_circun.item(0, 4)
        item.setText(_translate("MainWindow", "Final"))
        item = self.table_perife_circun.item(1, 0)
        item.setText(_translate("MainWindow", "P. Brazo Relajado (cm)"))
        item = self.table_perife_circun.item(2, 0)
        item.setText(_translate("MainWindow", "P. Brazo Flexionado Contraido (cm)"))
        item = self.table_perife_circun.item(3, 0)
        item.setText(_translate("MainWindow", "P. Muñeca (cm)"))
        item = self.table_perife_circun.item(4, 0)
        item.setText(_translate("MainWindow", "P. Minimo Cintura (cm)"))
        item = self.table_perife_circun.item(5, 0)
        item.setText(_translate("MainWindow", "P. Abdominal (cm)"))
        item = self.table_perife_circun.item(6, 0)
        item.setText(_translate("MainWindow", "P. Caderas (cm)"))
        self.table_perife_circun.setSortingEnabled(__sortingEnabled)
        self.lbl_medidas_simples.setText(_translate("MainWindow", "Medidas simples"))
        self.lbl_perife_circun.setText(_translate("MainWindow", "Periféricos/Circunferencias"))
        self.btn_guardar_medidas.setText(_translate("MainWindow", "Guardar"))
        self.hora_s.setText(_translate("MainWindow", "Hora:"))
        self.nombrec_s.setText(_translate("MainWindow", "Gustavo Rodriguez"))
        self.documento_s.setText(_translate("MainWindow", "Documento:"))
        self.tipo_patient_s.setText(_translate("MainWindow", "Tipo de Paciente:"))
        self.sexo_s.setText(_translate("MainWindow", "Sexo:"))
        self.nombrec_s_5.setText(_translate("MainWindow", "Pais:"))
        self.telf_s.setText(_translate("MainWindow", "Teléfono:"))
        self.Act_fisica_s.setText(_translate("MainWindow", "Actividad:"))
        self.fnacimiento_s.setText(_translate("MainWindow", "Fecha de nacimiento:"))
        self.edad_s.setText(_translate("MainWindow", "Edad:"))
        self.fecha_s.setText(_translate("MainWindow", "Fecha: "))
        self.lbl_title_cal_s.setText(_translate("MainWindow", "Cálculos"))
        self.lbl_imc.setText(_translate("MainWindow", "I.M.C:"))
        self.lbl_icc.setText(_translate("MainWindow", "I.C.C:"))
        self.lbl_ice.setText(_translate("MainWindow", "I.C.E:"))
        self.lbl_porcent_grasa.setText(_translate("MainWindow", "% de Grasa:"))
        self.lbl_p_degrasa.setText(_translate("MainWindow", "P. de Grasa:"))
        self.lbl_p_degrasa_percentil.setText(_translate("MainWindow", "% de Grasa en Percentiles:"))
        self.lbl_indice_mlg.setText(_translate("MainWindow", "Indice M.L.G:"))
        self.lbl_camb.setText(_translate("MainWindow", "C.A.M.B:"))
        self.lbl_iamb.setText(_translate("MainWindow", "I.A.M.B:"))
        self.lbl_complex.setText(_translate("MainWindow", "Complexión:"))
        self.lbl_peso_ideal.setText(_translate("MainWindow", "Peso Ideal:"))
        self.btn_patient_s.setText(_translate("MainWindow", "Volver a Pacientes"))
        self.btn_inform_s.setText(_translate("MainWindow", "Ver Informe"))
        self.btn_model3D_s.setText(_translate("MainWindow", "Ver Modelo 3D"))
        self.lbl_name_c.setText(_translate("MainWindow", "Nombre"))
        self.lbl_edad_c.setText(_translate("MainWindow", "Edad"))
        self.lbl_tpatient_c.setText(_translate("MainWindow", "Tipo de Paciente"))
        self.lbl_sexo_c.setText(_translate("MainWindow", "Sexo"))
        self.lbl_pais_c.setText(_translate("MainWindow", "País"))
        self.lbl_fecha_hora.setText(
            _translate("MainWindow", "La última vez que se agregó una cita fue el XX/XX/XXX a las XX:XX:XXXX"))
        __sortingEnabled = self.table_citas.isSortingEnabled()
        self.table_citas.setSortingEnabled(False)
        item = self.table_citas.item(0, 0)
        item.setText(_translate("MainWindow", "Nro de la Cita"))
        item = self.table_citas.item(0, 1)
        item.setText(_translate("MainWindow", "Nombre "))
        item = self.table_citas.item(0, 2)
        item.setText(_translate("MainWindow", "Fecha"))
        item = self.table_citas.item(0, 3)
        item.setText(_translate("MainWindow", "Hora"))
        self.table_citas.setSortingEnabled(__sortingEnabled)
        self.btn_volver_patient_cita.setText(_translate("MainWindow", "Crear Modelo 3D"))
        self.btn_agregar_cita.setText(_translate("MainWindow", "Agregar cita"))
        self.btn_verinfo_cita.setText(_translate("MainWindow", "Ver cita"))
        self.lbl_nombre.setText(_translate("MainWindow", "Walter J. Raleigh"))
        self.btn_tipo_paciente.setText(_translate("MainWindow", "Adulto"))
        self.lbl_info.setText(_translate("MainWindow", "Información General"))
        self.lbl_desc1.setText(_translate("MainWindow", "Fecha de la Cita:"))
        self.lbl_fecha.setText(_translate("MainWindow", "24 de Noviembre del 2023"))
        self.lbl_desc2.setText(_translate("MainWindow", "Documento:"))
        self.lbl_documento.setText(_translate("MainWindow", "C.I. 24.734.053"))
        self.lbl_desc3.setText(_translate("MainWindow", "Edad de la Persona:"))
        self.lbl_edad.setText(_translate("MainWindow", "26 años"))
        self.lbl_desc4.setText(_translate("MainWindow", "Peso Actual:"))
        self.lbl_peso.setText(_translate("MainWindow", "1,80kgs"))
        self.lbl_desc5.setText(_translate("MainWindow", "Estatura Actual:"))
        self.lbl_estatura.setText(_translate("MainWindow", "1,64cm"))
        self.lbl_desc6.setText(_translate("MainWindow", "Teléfono:"))
        self.lbl_telefono.setText(_translate("MainWindow", "+584246765152"))
        self.label_26.setText(_translate("MainWindow", "Fecha de la Cita:"))
        self.label_27.setText(_translate("MainWindow", "24 de Noviembre del 2023"))
        self.lbl_desc7.setText(_translate("MainWindow", "Actividad Física"))
        self.lbl_actividad_fisica.setText(_translate("MainWindow", "Dormir"))

    # Conexiones de las ventanas
    def pag_connection(self):
        self.btn_menu.clicked.connect(self.side_menu)
        self.btn_paciente.clicked.connect(self.patient)
        self.btn_paciente.clicked.connect(self.side_menu_op)
        self.btn_add.clicked.connect(self.ingresar_datap)
        self.btn_sigR1.clicked.connect(self.txt_exists)
        self.table_medidas.itemChanged.connect(self.row_table)
        self.table_pliegues_cut.itemChanged.connect(self.row_table)
        self.table_perife_circun.itemChanged.connect(self.row_table)
        self.btn_guardar_medidas.clicked.connect(self.comprobar)
        self.btn_inform_s.clicked.connect(lambda: self.data_pdf(self.row_update_cita, 0))
        self.btn_agregar_cita.clicked.connect(self.new_cita)
        self.btn_volver_patient_cita.clicked.connect(self.cambiar_ventana3d)
        self.btn_verinfo_cita.clicked.connect(self.ver_informe_cita)
        self.btn_model3D.clicked.connect(self.cambiar_ventana3d)

    def cambiar_ventana3d(self):
        if self.visor_3d is None:
            self.visor_3d = QVTKRenderWindowInteractor(parent=self.frame_visor3d)
            self.visor_3d.setObjectName("visor_3d")
            self.verticalLayout_frame3d.addWidget(self.visor_3d)
            self.verticalLayout_frame3d.setContentsMargins(0, 0, 0, 0)

        if self.table_citas.currentRow() > 0:
            cita_row = self.table_citas.currentRow()
            self.actualizar_json(self.row_update_cita, cita_row, self.json_path)
            #self.correr_subproceso(self.blender_path, self.script_path)
            self.cargarModelo(self.model_path)
        else:
            msg = QMessageBox()
            QMessageBox.critical(msg, "Error", "No se ha seleccionado ninguna cita del paciente.")

    def cargarModelo(self, ruta):
        self.content.setCurrentIndex(3)
        model = load(ruta)
        scals = model.points()[:, 0] + 100  # pick x coordinates of vertices
        model.cmap("gray", scals)
        vp = Plotter(qt_widget=self.visor_3d, pos=(0, 1))
        vp.add(model)
        vp.show(title='Modelo 3D', mode=1, bg='coolwarm')

    def correr_subproceso(self, blender, script):
        self.dlg = QtWidgets.QMessageBox()
        self.dlg.setWindowTitle("Información")
        self.dlg.setText("El modelo está siendo creado")
        self.dlg.show()
        if self.p is None:
            self.p = QtCore.QProcess()
            self.p.readyReadStandardOutput.connect(self.handle_stdout)
            self.p.readyReadStandardError.connect(self.handle_stderr)
            self.p.finished.connect(self.modelo_terminado)
            self.p.start(str(blender), ['--background', '--python', str(script)])

    def handle_stderr(self):
        data = self.p.readAllStandardError()
        stderr = bytes(data).decode("utf8")
        print(stderr)

    def handle_stdout(self):
        data = self.p.readAllStandardOutput()
        stdout = bytes(data).decode("utf8")
        print(stdout)
        word = 'Progress'
        if word in stdout:
            stdout = int(float(stdout[stdout.find(word) + len(word) + 2: stdout.find(word) + len(word) + 8].strip()))

    def modelo_terminado(self):
        self.cargarModelo(self.model_path)
        self.dlg.hide()
        self.p = None

    def actualizar_json(self, row_paciente, row_cita, ruta_json):
        data = []
        with open(f'pacientes.txt', 'rb') as file_new_d:
            while True:
                try:
                    info = pickle.load(file_new_d)
                    data.append(info)
                except EOFError:
                    break

        multi_medidas = []
        all_data = []

        for position, datos in enumerate(data):
            str((datos.__dict__).get('name'))
            str((datos.__dict__).get('fnacimiento'))
            str((datos.__dict__).get('medidas'))
            str((datos.__dict__).get('doc'))
            str((datos.__dict__).get('t_pac'))
            str((datos.__dict__).get('act_deporte'))
            str((datos.__dict__).get('sex')),


            row_data = [str((datos.__dict__).get('t_pac')),
                        str((datos.__dict__).get('name')),
                        str((datos.__dict__).get('doc')),
                        str((datos.__dict__).get('fnacimiento')),
                        str((datos.__dict__).get('act_deporte')),
                        datos.__dict__.get('medidas'),
                        str((datos.__dict__).get('sex'))
                        ]
            all_data.append(row_data)

        nombre_sin_div = str(all_data[row_paciente - 1][1])
        edad = self.calcular_edad(str(all_data[row_paciente - 1][3]))
        self.lbl_nombre.setText(" ".join(nombre_sin_div.split()))
        self.lbl_documento.setText(str(all_data[row_paciente - 1][2]))
        self.lbl_actividad_fisica.setText(str(all_data[row_paciente - 1][4]))
        self.lbl_edad.setText(str(edad) + " años")
        self.lbl_peso.setText(str(all_data[row_paciente - 1][5][row_cita - 1][1]) + "kgs")
        self.lbl_estatura.setText(str(all_data[row_paciente - 1][5][row_cita - 1][0]) + "mts")
        datos_finales = all_data[row_paciente - 1][5][row_cita - 1]
        datos_finales = [float(d) for d in datos_finales]

        edad_modelo = self.transformar_valor(0.0, 80.0, -1.0, 1.0, edad)

        # Preparando datos para Paciente Adulto
        if row_data[0] == 'Adulto':
            datos_finales_cita = self.datos_finales(edad, all_data[row_paciente - 1][5][row_cita - 1])
            datos_finales_cita = [float(d) for d in datos_finales_cita]

            altura_modelo = self.transformar_valor(0.0, 180.0, -1.0, 1.0, datos_finales[0])
            # peso va con IMC
            profundidad_abdominal_modelo = self.transformar_valor(0.0, 45.0, -1.0, 1.0, datos_finales[2])
            triceps_modelo = self.transformar_valor(0.0, 15.0, -1.0, 1.0, datos_finales[3])
            subescapular_modelo = self.transformar_valor(0.0, 20.0, -1.0, 1.0, datos_finales[4])
            biceps_modelo = self.transformar_valor(0.0, 10.0, -1.0, 1.0, datos_finales[5])
            cresta_iliaca_modelo = self.transformar_valor(0.0, 30.0, -1.0, 1.0, datos_finales[6])
            pbr_modelo = self.transformar_valor(0.0, 45.0, -1.0, 1.0, datos_finales[7])
            pbf_modelo = self.transformar_valor(0.0, 45.0, -1.0, 1.0, datos_finales[8])
            pm_modelo = self.transformar_valor(0.0, 20.0, -1.0, 1.0, datos_finales[9])
            minimo_cintura_modelo = self.transformar_valor(0.0, 100.0, -1.0, 1.0, datos_finales[10])
            pa_modelo = self.transformar_valor(0.0, 120.0, -1.0, 1.0, datos_finales[11])
            pc_modelo = self.transformar_valor(0.0, 120.0, -1.0, 1.0, datos_finales[12])

            imc_modelo = self.transformar_valor(0.0, 60.0, -1.0, 1.0, datos_finales_cita[0])
            musculatura_modelo = self.transformar_valor(15.0, 24.0, -1.0, 1.0, datos_finales_cita[6])
            brazo_musculatura_modelo = self.transformar_valor(0.0, 95.0, -1.0, 1.0, datos_finales_cita[7])

        # Preparando datos para Paciente Atleta
        elif row_data[0] == 'Atleta':
            datos_finales_cita = self.datos_finales(edad, all_data[row_paciente - 1][5][row_cita - 1])
            datos_finales_cita = [float(d) for d in datos_finales_cita]

            altura_modelo = self.transformar_valor(0.0, 180.0, -1.0, 1.0, datos_finales[0])
            # peso va con IMC
            profundidad_abdominal_modelo = self.transformar_valor(0.0, 45.0, -1.0, 1.0, datos_finales[2])
            envergadura_modelo = self.transformar_valor(165.0, 200.0, -1.0, 1.0, datos_finales[3])
            lad_modelo = self.transformar_valor(70.0, 80.0, -1.0, 1.0, datos_finales[5])
            triceps_modelo = self.transformar_valor(0.0, 15.0, -1.0, 1.0, datos_finales[6])
            subescapular_modelo = self.transformar_valor(0.0, 20.0, -1.0, 1.0, datos_finales[7])
            biceps_modelo = self.transformar_valor(0.0, 10.0, -1.0, 1.0, datos_finales[8])
            cresta_iliaca_modelo = self.transformar_valor(0.0, 30.0, -1.0, 1.0, datos_finales[9])
            supraespinal_modelo = self.transformar_valor(0.0, 35.0, -1.0, 1.0, datos_finales[10])
            # abdominal_modelo = self.transformar_valor(0.0, 35.0, -1.0, 1.0, datos_finales[11])
            muslo_frontal_modelo = self.transformar_valor(20.0, 40.0, -1.0, 1.0, datos_finales[12])
            pantorrilla_modelo = self.transformar_valor(20.0, 40.0, -1.0, 1.0, datos_finales[13])

            pbr_modelo = self.transformar_valor(0.0, 45.0, -1.0, 1.0, datos_finales[14])
            pbf_modelo = self.transformar_valor(0.0, 45.0, -1.0, 1.0, datos_finales[15])
            p_muneca = self.transformar_valor(0.0, 20.0, -1.0, 1.0, datos_finales[16])
            minimo_cintura_modelo = self.transformar_valor(0.0, 70.0, -1.0, 1.0, datos_finales[17])
            pcefalico_modelo = self.transformar_valor(55.0, 60.0, -1.0, 1.0, datos_finales[20])
            ptorax_modelo = self.transformar_valor(80.0, 100.0, -1.0, 1.0, datos_finales[21])
            pcuello_modelo = self.transformar_valor(30.0, 40.0, -1.0, 1.0, datos_finales[22])
            pmuslomedio_modelo = self.transformar_valor(45.0, 65.0, -1.0, 1.0, datos_finales[27])
            ppantorrilla_modelo = self.transformar_valor(30.0, 40.0, -1.0, 1.0, datos_finales[28])
            pmtobillo_modelo = self.transformar_valor(18.0, 26.0, -1.0, 1.0, datos_finales[29])

            acromialeradiale_modelo = self.transformar_valor(55.0, 65.0, -1.0, 1.0, datos_finales[30])
            radiale_stylion_modelo = self.transformar_valor(30.0, 40.0, -1.0, 1.0, datos_finales[31])
            midstylion_dactylion_modelo = self.transformar_valor(20.0, 30.0, -1.0, 1.0, datos_finales[32])
            altura_iliospinale_modelo = self.transformar_valor(90.0, 110.0, -1.0, 1.0, datos_finales[33])
            altura_tronchanterion_modelo = self.transformar_valor(40.0, 55.0, -1.0, 1.0, datos_finales[34])
            trochanterion_tl_modelo = self.transformar_valor(40.0, 55.0, -1.0, 1.0, datos_finales[35])
            altura_tl_modelo = self.transformar_valor(40.0, 55.0, -1.0, 1.0, datos_finales[36])
            tl_sl_modelo = self.transformar_valor(36.0, 42.0, -1.0, 1.0, datos_finales[37])

            diametro_biacromial_modelo = self.transformar_valor(40.0, 49.0, -1.0, 1.0, datos_finales[37])
            diametro_biliocristal_modelo = self.transformar_valor(27.0, 34.0, -1.0, 1.0, datos_finales[38])
            largo_pie_modelo = self.transformar_valor(24.0, 28.0, -1.0, 1.0, datos_finales[40])
            anchura_torax = self.transformar_valor(28.0, 35.0, -1.0, 1.0, datos_finales[41])
            profundidad_toraxt = self.transformar_valor(18.0, 23.0, -1.0, 1.0, datos_finales[42])
            diametro_bch = self.transformar_valor(5.0, 7.0, -1.0, 1.0, datos_finales[43])
            diametro_bcf = self.transformar_valor(9.0, 12.0, -1.0, 1.0, datos_finales[44])

            imc_modelo = self.transformar_valor(0.0, 60.0, -1.0, 1.0, datos_finales_cita[0])
            musculatura_modelo = self.transformar_valor(15.0, 24.0, -1.0, 1.0, datos_finales_cita[2])
            brazo_musculatura_modelo = self.transformar_valor(0.0, 95.0, -1.0, 1.0, datos_finales_cita[8])


        with open(ruta_json, 'r', encoding='utf-8') as json_file:
            datos = json.load(json_file)

        datos['preset'] = 'm_la01' if row_data[6] == 'Masculino' else 'f_la01'

        if row_data[0] == 'Adulto':
            datos['tpac'] = 'Adulto'
            datos['altura'] = altura_modelo
            datos['edad'] = edad_modelo
            datos['grasa'] = imc_modelo
            datos['musculatura'] = musculatura_modelo
            datos['profundidad-abdominal'] = profundidad_abdominal_modelo
            datos['triceps'] = triceps_modelo
            datos['subescapular'] = subescapular_modelo
            datos['biceps'] = biceps_modelo
            datos['cresta'] = cresta_iliaca_modelo
            datos['pbr'] = pbr_modelo
            datos['pbf'] = pbf_modelo
            datos['pm'] = pm_modelo
            datos['minimo-cintura'] = minimo_cintura_modelo
            datos['pa'] = pa_modelo
            datos['pc'] = pc_modelo
            datos['brazo-musculatura'] = brazo_musculatura_modelo
        elif row_data[0] == 'Atleta':
            datos['tpac'] = 'Atleta'
            datos['altura'] = altura_modelo
            datos['edad'] = edad
            datos['profundidad-abdominal'] = profundidad_abdominal_modelo
            datos['envergadura'] = envergadura_modelo
            datos['lad'] = lad_modelo
            datos['triceps'] = triceps_modelo
            datos['subescapular'] = subescapular_modelo
            datos['biceps'] = biceps_modelo
            datos['cresta'] = cresta_iliaca_modelo
            datos['supraespinal'] = supraespinal_modelo
            datos['muslo-frontal'] = muslo_frontal_modelo
            datos['pantorrilla'] = pantorrilla_modelo
            datos['pbr'] = pbr_modelo
            datos['pbf'] = pbf_modelo
            datos['pm'] = p_muneca
            datos['pcefalico'] = pcefalico_modelo
            datos['ptorax'] = ptorax_modelo
            datos['pcuello'] = pcuello_modelo
            datos['pmuslomedio'] = pmuslomedio_modelo
            datos['ppantorrilla'] = ppantorrilla_modelo
            datos['pmtobillo'] = pmtobillo_modelo
            datos['acromialeradiale'] = acromialeradiale_modelo
            datos['radiale_stylion'] = radiale_stylion_modelo
            datos['midstylion_dactylion'] = midstylion_dactylion_modelo
            datos['altura_iliospinale'] = altura_iliospinale_modelo
            datos['altura-tronchanterion'] = altura_tronchanterion_modelo
            datos['tronchanterion_tl'] = trochanterion_tl_modelo
            datos['altura_tl'] = altura_tl_modelo
            datos['tl_sl'] = tl_sl_modelo
            datos['diametro_biacromial'] = diametro_biacromial_modelo
            datos['diametro_biliocristal'] = diametro_biliocristal_modelo
            datos['largo_pie'] = largo_pie_modelo
            datos['anchura_torax'] = anchura_torax
            datos['profundidad_toraxt'] = profundidad_toraxt
            datos['diametro_bch'] = diametro_bch
            datos['diametro_bcf'] = diametro_bcf
            datos['grasa'] = imc_modelo
            datos['musculatura'] = musculatura_modelo
            datos['brazo-musculatura'] = brazo_musculatura_modelo

        with open(ruta_json, 'w', encoding='utf-8') as json_file:
            json.dump(datos, json_file)
    # Paciente

    def transformar_valor(self, min_val, max_val, new_min, new_max, val):
        valor_normalizado = (val - min_val) / (max_val - min_val)
        valor_transformado = (valor_normalizado * (new_max - new_min)) + new_min

        return round(valor_transformado, 3)

    def datos_finales(self, edad, medidas):
        estatura = float(medidas[0])
        peso = float(medidas[1])
        prof_abdominal = float(medidas[2])
        triceps = float(medidas[3])
        subescapular = float(medidas[4])
        biceps = float(medidas[5])
        cresta_iliaca = float(medidas[6])
        p_brazo_rela = float(medidas[7])
        p_brazo_flex_contraido = float(medidas[8])
        p_muñeca = float(medidas[9])
        p_min_cintura = float(medidas[10])
        p_abdo = float(medidas[11])
        p_caderas = float(medidas[12])
        estatura = estatura / 100
        imc = peso / (estatura ** 2)
        icc = p_min_cintura / p_caderas

        ice = p_min_cintura / estatura

        porcent_grasa = triceps + subescapular + biceps + cresta_iliaca
        porcent_grasa_con_log = log(porcent_grasa)
        dato6 = 1.1610 - (0.0632 * porcent_grasa_con_log)
        dato7 = ((4.95 / dato6) - 4.50) * 100
        porcent_grasa_f = dato7

        peso_d_grasa = peso * (porcent_grasa_f / 100)

        porcent_grasa_percentil = self.porcent_grasa_percentil(porcent_grasa_f, edad)

        indice_mlg = (peso * (((100 - porcent_grasa_f) / 100) + 6.1 * (1.8 * estatura))) / estatura ** 2

        dato_extra = 0.31416 * (triceps / 10)
        camb = (((p_brazo_rela - dato_extra) ** 2) / (4 * 3.1416)) - 10.0

        iamb = self.iamb(porcent_grasa_f, edad)

        complex = estatura / p_muñeca

        peso_ideal = estatura - 100 - (((estatura - 150) / 4) + ((edad - 20) / 20))

        salida = [imc, icc, ice, porcent_grasa_f, peso_d_grasa, porcent_grasa_percentil, indice_mlg, camb, iamb,
                  complex, peso_ideal]

        return salida
    def calcular_edad(self, fecha_edad):
        fecha_nacimiento = datetime.strptime(fecha_edad, "%d/%m/%Y").date()
        hoy = date.today()
        edad = hoy.year - fecha_nacimiento.year

        if (hoy.month, hoy.day) < (fecha_nacimiento.month, fecha_nacimiento.day):
            edad -= 1

        return edad

    def patient(self):
        self.selected_op(self.btn_paciente)
        self.deselected_op(self.btn_db)
        self.deselected_op(self.btn_estadistica_patient)
        self.deselected_op(self.btn_model3D)

        self.row_update_cita = 0

        self.name.clear()
        self.apellido.clear()
        self.documento.clear()
        self.tipo_doc.setCurrentIndex(0)
        self.telf.clear()
        self.act_deporte.clear()
        self.code_country.setCurrentIndex(0)
        self.country.setCurrentIndex(0)
        self.sexo.setCurrentIndex(0)
        self.tipo_pac.setCurrentIndex(0)

        for i in range(3):
            i += 1
            for j in range(4):
                j += 1
                self.table_medidas.item(i, j).setText("")
        for i in range(4):
            i += 1
            for j in range(4):
                j += 1
                self.table_pliegues_cut.item(i, j).setText("")
        for i in range(6):
            i += 1
            for j in range(4):
                j += 1
                self.table_perife_circun.item(i, j).setText("")

        self.content.setCurrentWidget(self.Paciente)
        self.content_patient.setCurrentWidget(self.Pacientes)

    # Tabla con la lista de pacientes

    def rows(self):
        if os.path.exists('pacientes.txt'):
            if os.stat('pacientes.txt').st_size == 0:
                row = 1
                return row
            else:
                data = []
                with open(f'pacientes.txt', 'rb') as file_row:
                    while True:
                        try:
                            info = pickle.load(file_row)
                            data.append(info)
                        except EOFError:
                            break
                row = len(data) + 1
                file_row.close()
                return row
        else:
            open('pacientes.txt', 'ab').close()
            row = 1
            return row

    def items(self):
        items = []
        filas = 0
        with open(f'pacientes.txt', 'rb') as file_new_i:
            while True:
                try:
                    info = pickle.load(file_new_i)
                    items.append(info)
                    filas += 1
                except EOFError:
                    break
        for row in range(filas):
            it = row + 1
            for i in range(6):
                item = QtWidgets.QTableWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
                font = QtGui.QFont()
                font.setFamily("Circular Std")
                font.setPointSize(11)
                item.setFont(font)
                item.setFlags(
                    QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
                self.table_patient.setItem(it, i, item)

    def content_table_patient(self):
        data_table = []
        row_data = 0
        with open(f'pacientes.txt', 'rb') as file_new_d:
            while True:
                try:
                    info = pickle.load(file_new_d)
                    data_table.append(info)
                    row_data += 1
                except EOFError:
                    break

        for position, datos in enumerate(data_table):
            item = self.table_patient.item(position + 1, 0)
            item.setText(str(datos.__dict__.get('name')))
            item = self.table_patient.item(position + 1, 1)
            item.setText(str(datos.__dict__.get('doc')))
            item = self.table_patient.item(position + 1, 2)
            item.setText(str(datos.__dict__.get('t_pac')))
            item = self.table_patient.item(position + 1, 3)
            item.setText(str(datos.__dict__.get('sex')))
            item = self.table_patient.item(position + 1, 4)
            item.setText(str(datos.__dict__.get('country')))

            self.btn_informe = QtWidgets.QPushButton()
            self.btn_informe.setMinimumSize(QtCore.QSize(20, 20))
            self.btn_informe.setMaximumSize(QtCore.QSize(20, 20))
            font = QtGui.QFont()
            font.setFamily("Circular Std")
            font.setPointSize(11)
            self.btn_informe.setFont(font)
            self.btn_informe.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.btn_informe.setStyleSheet("QPushButton {\n"
                                           "border: 0px solid;\n"
                                           "border-radius: 5px;\n"
                                           "color: black;\n"
                                           "margin: 0px;\n"
                                           "padding: 0px;\n"
                                           "background-color: rgb(0, 0, 30);\n"
                                           "}\n"
                                           "\n"
                                           "QPushButton:hover {\n"
                                           "background-color: rgb(0, 0, 61);\n"
                                           "}")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("icons/informe.png"), QtGui.QIcon.Mode.Normal,
                           QtGui.QIcon.State.Off)
            self.btn_informe.setIcon(icon)
            self.btn_informe.setIconSize(QtCore.QSize(20, 20))
            self.btn_informe.setObjectName("btn_citas")

            self.btn_vinforme = QtWidgets.QPushButton()
            self.btn_vinforme.setMinimumSize(QtCore.QSize(20, 20))
            self.btn_vinforme.setMaximumSize(QtCore.QSize(20, 20))
            font = QtGui.QFont()
            font.setFamily("Circular Std")
            font.setPointSize(11)
            self.btn_vinforme.setFont(font)
            self.btn_vinforme.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.btn_vinforme.setStyleSheet("QPushButton {\n"
                                            "border: 0px solid;\n"
                                            "border-radius: 5px;\n"
                                            "color: black;\n"
                                            "margin: 0px;\n"
                                            "padding: 0px;\n"
                                            "background-color: rgb(0, 0, 30);\n"
                                            "}\n"
                                            "\n"
                                            "QPushButton:hover {\n"
                                            "background-color: rgb(0, 0, 61);\n"
                                            "}")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("icons/verinfo.png"), QtGui.QIcon.Mode.Normal,
                           QtGui.QIcon.State.Off)
            self.btn_vinforme.setIcon(icon)
            self.btn_vinforme.setIconSize(QtCore.QSize(20, 20))
            self.btn_vinforme.setObjectName("btn_vinforme")

            self.btn_delete = QtWidgets.QPushButton()
            self.btn_delete.setMinimumSize(QtCore.QSize(20, 20))
            self.btn_delete.setMaximumSize(QtCore.QSize(20, 20))
            font = QtGui.QFont()
            font.setFamily("Circular Std")
            font.setPointSize(11)
            self.btn_delete.setFont(font)
            self.btn_delete.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.btn_delete.setStyleSheet("QPushButton {\n"
                                          "border: 0px solid;\n"
                                          "border-radius: 5px;\n"
                                          "color: black;\n"
                                          "margin: 0px;\n"
                                          "padding: 0px;\n"
                                          "background-color: rgb(0, 0, 30);\n"
                                          "}\n"
                                          "\n"
                                          "QPushButton:hover {\n"
                                          "background-color: rgb(0, 0, 61);\n"
                                          "}")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("icons/delete.png"), QtGui.QIcon.Mode.Normal,
                           QtGui.QIcon.State.Off)
            self.btn_delete.setIcon(icon)
            self.btn_delete.setIconSize(QtCore.QSize(20, 20))
            self.btn_delete.setObjectName("btn_delete")

            self.btn_vinforme.clicked.connect(partial(self.ver_cita, item))

            self.fr_button = QtWidgets.QFrame()
            self.fr_button.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
            self.fr_button.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
            self.fr_button.setObjectName("fr_button")
            button_layout = QtWidgets.QHBoxLayout(self.fr_button)
            button_layout.setContentsMargins(0, 0, 0, 0)
            button_layout.setSpacing(0)
            button_layout.setObjectName("button_layout")
            button_layout.addWidget(self.btn_informe)
            button_layout.addWidget(self.btn_vinforme)
            button_layout.addWidget(self.btn_delete)
            buttons_widget = QtWidgets.QWidget()
            buttons_widget.setLayout(button_layout)
            self.table_patient.setCellWidget(position + 1, 5, buttons_widget)

    def update_table(self):

        # Update rows
        rows = []
        row = 1
        with open(f'pacientes.txt', 'rb') as file_new_r:
            while True:
                try:
                    info = pickle.load(file_new_r)
                    rows.append(info)
                except EOFError:
                    break
        row = len(rows) + 1
        self.table_patient.setRowCount(row)

        print("lol2")

        # Update items
        items = []
        filas = 0
        with open(f'pacientes.txt', 'rb') as file_new_i:
            while True:
                try:
                    info = pickle.load(file_new_i)
                    items.append(info)
                    filas += 1
                except EOFError:
                    break
        for i in range(7):
            item = QtWidgets.QTableWidgetItem()
            item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
            font = QtGui.QFont()
            font.setFamily("Circular Std")
            font.setPointSize(11)
            item.setFont(font)
            item.setFlags(
                QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
            self.table_patient.setItem(filas, i, item)

        print("lol3")

        # Update data
        data_table = []
        new_position = 0
        with open(f'pacientes.txt', 'rb') as file_new_d:
            while True:
                try:
                    info = pickle.load(file_new_d)
                    data_table.append(info)
                    new_position += 1
                except EOFError:
                    break
        for position, datos in enumerate(data_table):
            item = self.table_patient.item(position + 1, 0)
            item.setText(str(datos.__dict__.get('name')))
            item = self.table_patient.item(position + 1, 1)
            item.setText(str(datos.__dict__.get('doc')))
            item = self.table_patient.item(position + 1, 2)
            item.setText(str(datos.__dict__.get('t_pac')))
            item = self.table_patient.item(position + 1, 3)
            item.setText(str(datos.__dict__.get('sex')))
            item = self.table_patient.item(position + 1, 4)
            item.setText(str(datos.__dict__.get('country')))

            self.btn_informe = QtWidgets.QPushButton()
            self.btn_informe.setMinimumSize(QtCore.QSize(20, 20))
            self.btn_informe.setMaximumSize(QtCore.QSize(20, 20))
            font = QtGui.QFont()
            font.setFamily("Circular Std")
            font.setPointSize(11)
            self.btn_informe.setFont(font)
            self.btn_informe.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.btn_informe.setStyleSheet("QPushButton {\n"
                                           "border: 0px solid;\n"
                                           "border-radius: 5px;\n"
                                           "color: black;\n"
                                           "margin: 0px;\n"
                                           "padding: 0px;\n"
                                           "background-color: rgb(0, 0, 30);\n"
                                           "}\n"
                                           "\n"
                                           "QPushButton:hover {\n"
                                           "background-color: rgb(0, 0, 61);\n"
                                           "}")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("icons/informe.png"), QtGui.QIcon.Mode.Normal,
                           QtGui.QIcon.State.Off)
            self.btn_informe.setIcon(icon)
            self.btn_informe.setIconSize(QtCore.QSize(20, 20))
            self.btn_informe.setObjectName("btn_citas")

            self.btn_vinforme = QtWidgets.QPushButton()
            self.btn_vinforme.setMinimumSize(QtCore.QSize(20, 20))
            self.btn_vinforme.setMaximumSize(QtCore.QSize(20, 20))
            font = QtGui.QFont()
            font.setFamily("Circular Std")
            font.setPointSize(11)
            self.btn_vinforme.setFont(font)
            self.btn_vinforme.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.btn_vinforme.setStyleSheet("QPushButton {\n"
                                            "border: 0px solid;\n"
                                            "border-radius: 5px;\n"
                                            "color: black;\n"
                                            "margin: 0px;\n"
                                            "padding: 0px;\n"
                                            "background-color: rgb(0, 0, 30);\n"
                                            "}\n"
                                            "\n"
                                            "QPushButton:hover {\n"
                                            "background-color: rgb(0, 0, 61);\n"
                                            "}")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("icons/verinfo.png"), QtGui.QIcon.Mode.Normal,
                           QtGui.QIcon.State.Off)
            self.btn_vinforme.setIcon(icon)
            self.btn_vinforme.setIconSize(QtCore.QSize(20, 20))
            self.btn_vinforme.setObjectName("btn_vinforme")

            self.btn_delete = QtWidgets.QPushButton()
            self.btn_delete.setMinimumSize(QtCore.QSize(20, 20))
            self.btn_delete.setMaximumSize(QtCore.QSize(20, 20))
            font = QtGui.QFont()
            font.setFamily("Circular Std")
            font.setPointSize(11)
            self.btn_delete.setFont(font)
            self.btn_delete.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            self.btn_delete.setStyleSheet("QPushButton {\n"
                                          "border: 0px solid;\n"
                                          "border-radius: 5px;\n"
                                          "color: black;\n"
                                          "margin: 0px;\n"
                                          "padding: 0px;\n"
                                          "background-color: rgb(0, 0, 30);\n"
                                          "}\n"
                                          "\n"
                                          "QPushButton:hover {\n"
                                          "background-color: rgb(0, 0, 61);\n"
                                          "}")
            icon = QtGui.QIcon()
            icon.addPixmap(QtGui.QPixmap("icons/delete.png"), QtGui.QIcon.Mode.Normal,
                           QtGui.QIcon.State.Off)
            self.btn_delete.setIcon(icon)
            self.btn_delete.setIconSize(QtCore.QSize(20, 20))
            self.btn_delete.setObjectName("btn_delete")

            self.btn_vinforme.clicked.connect(partial(self.ver_cita, item))

            self.fr_button = QtWidgets.QFrame()
            self.fr_button.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
            self.fr_button.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
            self.fr_button.setObjectName("fr_button")
            button_layout = QtWidgets.QHBoxLayout(self.fr_button)
            button_layout.setContentsMargins(0, 0, 0, 0)
            button_layout.setSpacing(0)
            button_layout.setObjectName("button_layout")
            button_layout.addWidget(self.btn_informe)
            button_layout.addWidget(self.btn_vinforme)
            button_layout.addWidget(self.btn_delete)
            buttons_widget = QtWidgets.QWidget()
            buttons_widget.setLayout(button_layout)
            self.table_patient.setCellWidget(position + 1, 5, buttons_widget)

        print("lol4")

    from pdfs import create_pdf

    def ingresar_datap(self):
        self.content.setCurrentWidget(self.Paciente)
        self.content_patient.setCurrentWidget(self.data_patient)
        self.ingresar_patient.setCurrentWidget(self.data_personal)

    def txt_exists(self):
        verificar = self.verification()
        if verificar == 1:
            self.nombrec = self.name.text() + " " + self.apellido.text()
            self.lbl_name_patient_medidas.setText("Paciente: " + self.nombrec)
            self.btn_sigR1.setEnabled(True)
            self.ingresar_patient.setCurrentWidget(self.Mediciones)

    def row_table(self, item):
        table1 = self.table_medidas
        table2 = self.table_pliegues_cut
        table3 = self.table_perife_circun

        if (table1.item(1, 4).text() == "" or table1.item(2, 4).text() == "" or table1.item(3,
                                                                                            4).text() == "") and item.row() <= 3:
            medidas = [1, 2]
            table1 = self.table_medidas
            self.item_content(table1, item.row(), medidas)
        if (table2.item(1, 4).text() == "" or table2.item(2, 4).text() == "" or table2.item(3,
                                                                                            4).text() == "" or table2.item(
            4, 4).text() == "") and item.row() <= 4:
            medidas = [0]
            table2 = self.table_pliegues_cut
            self.item_content(table2, item.row(), medidas)
        if (table3.item(1, 4).text() == "" or table3.item(2, 4).text() == "" or table3.item(3,
                                                                                            4).text() == "" or table3.item(
            4, 4).text() == "" or table3.item(5, 4).text() == "" or table3.item(6,
                                                                                4).text() == "") and item.row() <= 6:
            medidas = [1, 2, 3, 4, 6]
            table3 = self.table_perife_circun
            self.item_content(table3, item.row(), medidas)

    def item_content(self, table, row, tipo_m):
        nombre_medida = table.item(row, 0).text()
        lim = self.check_medidas(row, tipo_m, table)
        if lim != 0:
            if table.item(row, 1).text() != "" or table.item(row, 2).text() != "":
                prueba = self.comparativa(row, lim, table)
                if prueba:
                    table.blockSignals(True)
                    if table.signalsBlocked():
                        if table.item(row, 3).text() == "":
                            msg = QMessageBox()
                            QMessageBox.information(msg, "Aviso",
                                                    "¡La medida " + nombre_medida + " requiere que ingrese una 3ra medida")
                            table.item(row, 3).setText("0")
                            table.item(row, 3).setFlags(
                                QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsSelectable | QtCore.Qt.ItemFlag.ItemIsEditable | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
                        self.calculos(row, table)
                        table.blockSignals(False)
                elif not prueba:
                    table.blockSignals(True)
                    if table.signalsBlocked():
                        print("No hace falta una tercera medida.")
                        self.calculos2medidas(row, table)
                        table.blockSignals(False)
            else:
                print("Faltan medidas.")
        else:
            print("Error en las medidas agregadas.")

    def check_medidas(self, i, m, table):

        if table.item(i, 1) == "" or table.item(i, 2).text() == "":
            print("Las medidas 1 y 2 no pueden estar vacias.")
            return 0
        if table.item(i, 1).text().isdigit() is False or table.item(i, 2).text().isdigit() is False:
            print("Los valores solo pueden ser numeros.")
            return 0
        elif table.item(i, 1).text().isdigit() is True and table.item(i, 2).text().isnumeric() is True:
            if i in m:
                return 1
            else:
                return 5
        else:
            print("Error al ingresar los datos en la tabla.")
            return 0

    def calculos(self, i, table):

        if table.item(i, 3).text().isdigit() is False:

            print("Los valores solo pueden ser numeros.")

        elif table.item(i, 3).text().isdigit() == "":

            print("La medicion 3 no puede estar vacia.")

        elif table.item(i, 3).text().isdigit() is True:

            dato1 = float(table.item(i, 1).text())
            dato2 = float(table.item(i, 2).text())
            dato3 = float(table.item(i, 3).text())

            if dato1 <= dato2 <= dato3 or dato3 <= dato2 <= dato1:
                table.item(i, 4).setText(str(dato2))
            elif dato2 <= dato1 <= dato3 or dato3 <= dato1 <= dato2:
                table.item(i, 4).setText(str(dato1))
            else:
                table.item(i, 4).setText(str(dato3))
        else:
            print("Error en el ingreso de datos.")

    def calculos2medidas(self, i, table):

        dato1 = float(table.item(i, 1).text())
        dato2 = float(table.item(i, 2).text())

        datof = (dato1 + dato2) / 2
        table.item(i, 4).setText(str(datof))

    def comparativa(self, i, lim, table):
        dato1 = float(table.item(i, 1).text())
        dato2 = float(table.item(i, 2).text())

        if dato1 != dato2:
            datofp = (abs(dato1 - dato2) / dato1) * 100
            return datofp > lim
        return False

    def comprobar(self):

        if self.btn_sigR1.isEnabled():

            verify = False

            table1 = self.table_medidas
            table2 = self.table_pliegues_cut
            table3 = self.table_perife_circun
            cont1 = 1
            cont2 = 1
            cont3 = 1

            for i in range(3):
                if table1.item(cont1, 4).text() != "":
                    if cont1 == 3:
                        for i in range(4):
                            if table2.item(cont2, 4).text() != "":
                                if cont2 == 3:
                                    for i in range(6):
                                        if table3.item(cont3, 4).text() != "":
                                            if cont3 == 6:
                                                verify = True
                                        else:
                                            msg = QMessageBox()
                                            QMessageBox.critical(msg,
                                                                 "Error en la tabla Perifericos/Circunferencias",
                                                                 "Faltan valores por completar en la tabla.")
                                            verify = False
                                            print("Hola")
                                            break
                                        cont3 += 1
                            else:
                                msg = QMessageBox()
                                QMessageBox.critical(msg, "Error en la tabla Pliegues Cutaneos",
                                                     "Faltan valores por completar en la tabla.")
                                verify = False
                                break
                            cont2 += 1
                else:
                    msg = QMessageBox()
                    QMessageBox.critical(msg, "Error en la tabla Medidas Simples",
                                         "Faltan valores por completar en la tabla.")
                    verify = False
                    break
                cont1 += 1

            if verify is True:

                self.nombrec = self.name.text() + " " + self.apellido.text()
                self.date = datetime.now().date()
                self.hora = datetime.now().time()
                fecha = self.date.strftime("%m/%d/%Y")
                h = str(self.hora.hour)
                min = str(self.hora.minute)
                seg = str(self.hora.second)
                hora_completa = h + ":" + min + ":" + seg

                self.nombrec_s.setText("Paciente: " + self.nombrec)
                self.fecha_s.setText("Fecha: " + fecha)
                self.hora_s.setText("Hora: " + hora_completa)

                self.btn_patient_s.setText("Volver a Pacientes")
                self.btn_patient_s.clicked.connect(self.patient)
                self.ingresar_patient.setCurrentWidget(self.Salida)

                self.guardar_data(self.nombrec, self.date, hora_completa)
            else:
                print("Faltan valores por completar en alguna de las tablas.")
                # msg = QMessageBox()
                # QMessageBox.critical(msg, "Error", "Faltan valores por completar.")

        elif self.btn_agregar_cita.isEnabled():

            verify = False

            table1 = self.table_medidas
            table2 = self.table_pliegues_cut
            table3 = self.table_perife_circun
            cont1 = 1
            cont2 = 1
            cont3 = 1

            for i in range(3):
                if table1.item(cont1, 4).text() != "":
                    if cont1 == 3:
                        for i in range(4):
                            if table2.item(cont2, 4).text() != "":
                                if cont2 == 3:
                                    for i in range(6):
                                        if table3.item(cont3, 4).text() != "":
                                            if cont3 == 6:
                                                verify = True
                                        else:
                                            msg = QMessageBox()
                                            QMessageBox.critical(msg,
                                                                 "Error en la tabla Perifericos/Circunferencias",
                                                                 "Faltan valores por completar en la tabla.")
                                            verify = False
                                            print("Hola")
                                            break
                                        cont3 += 1
                            else:
                                msg = QMessageBox()
                                QMessageBox.critical(msg, "Error en la tabla Pliegues Cutaneos",
                                                     "Faltan valores por completar en la tabla.")
                                verify = False
                                break
                            cont2 += 1
                else:
                    msg = QMessageBox()
                    QMessageBox.critical(msg, "Error en la tabla Medidas Simples",
                                         "Faltan valores por completar en la tabla.")
                    verify = False
                    break
                cont1 += 1

            if verify is True:

                data = []
                with open(f'pacientes.txt', 'rb') as file_new_d:
                    while True:
                        try:
                            info = pickle.load(file_new_d)
                            data.append(info)
                        except EOFError:
                            break

                row_data = []
                all_data = []
                med = []
                for position, datos in enumerate(data):
                    str(datos.__dict__.get('id'))
                    str(datos.__dict__.get('name'))
                    str(datos.__dict__.get('doc'))
                    str(datos.__dict__.get('t_pac'))
                    str(datos.__dict__.get('sex'))
                    str(datos.__dict__.get('country'))
                    str(datos.__dict__.get('fnacimiento'))
                    str(datos.__dict__.get('fecha'))
                    str(datos.__dict__.get('hora'))
                    str(datos.__dict__.get('medidas'))
                    str(datos.__dict__.get('act_deporte'))

                    row_data = [datos.__dict__.get('id'), datos.__dict__.get('name'), datos.__dict__.get('doc'),
                                datos.__dict__.get('t_pac'), datos.__dict__.get('sex'), datos.__dict__.get('country'),
                                datos.__dict__.get('fnacimiento'), datos.__dict__.get('fecha'), datos.__dict__.get('hora'), datos.__dict__.get('medidas'), datos.__dict__.get('act_deporte')]

                    all_data.append(row_data)

                medidas = []

                table1 = self.table_medidas
                table2 = self.table_pliegues_cut
                table3 = self.table_perife_circun
                cont1 = 1
                cont2 = 1
                cont3 = 1

                for i in range(3):
                    medidas.append(table1.item(cont1, 4).text())
                    if cont1 == 3:
                        for i in range(4):
                            medidas.append(table2.item(cont2, 4).text())
                            if cont2 == 3:
                                for i in range(6):
                                    medidas.append(table3.item(cont2, 4).text())
                                    cont3 += 1
                            cont2 += 1

                    cont1 += 1

                self.date = datetime.now().date()
                self.hora = datetime.now().time()
                h = str(self.hora.hour)
                min = str(self.hora.minute)
                seg = str(self.hora.second)
                hora_completa = h + ":" + min + ":" + seg

                medidas.append(str(self.date))
                medidas.append(str(hora_completa))

                all_data[self.row_update_cita-1][9].append(medidas)
                self.nombrec = all_data[self.row_update_cita-1][1]

                for x, data in enumerate(all_data):
                    self.guardar_cita(all_data[x][0], all_data[x][1], all_data[x][2], all_data[x][3],
                                          all_data[x][4],
                                          all_data[x][5], all_data[x][6], all_data[x][7], all_data[x][8],
                                          all_data[x][9], all_data[x][10], x)

                msg = QMessageBox()
                QMessageBox.information(msg, "Registro de cita completado",
                                        "¡La cita fue registrada con exito!")

                self.date = datetime.now().date()
                self.hora = datetime.now().time()
                h = str(self.hora.hour)
                min = str(self.hora.minute)
                seg = str(self.hora.second)
                hora_completa = h + ":" + min + ":" + seg

                self.nombrec_s.setText("Paciente: " + self.nombrec)
                self.fecha_s.setText("Fecha: " + str(self.date))
                self.hora_s.setText("Hora: " + hora_completa)

                self.btn_patient_s.setText("Volver a Citas")
                self.btn_patient_s.clicked.connect(lambda: self.volver_cita(self.row_update_cita))
                self.ingresar_patient.setCurrentWidget(self.Salida)

                lbl_adulto_h = [self.lbl_imc, self.lbl_icc, self.lbl_ice, self.lbl_porcent_grasa
                    , self.lbl_p_degrasa, self.lbl_p_degrasa_percentil, self.lbl_indice_mlg
                    , self.lbl_camb, self.lbl_iamb, self.lbl_complex, self.lbl_peso_ideal]
                salida_f = self.salida_final(medidas)
                salida_f = [float(medida) for medida in salida_f]
                for label, salida in zip(lbl_adulto_h, salida_f):
                    label.setText(f"{label.text()} {salida:.2f}")
            else:
                print("Faltan valores por completar en alguna de las tablas.")

    def verification(self):
        name = self.name.text()
        apellido = self.apellido.text()
        documento = self.documento.text()
        telf = self.telf.text()
        deporte = self.act_deporte.text()

        if name.isalpha() == True:
            if apellido.isalpha() == True:
                if documento.isdigit() == True:
                    if telf.isdigit() == True:
                        if deporte.isalpha() == True:
                            return 1
                        elif deporte == "":
                            msg = QMessageBox()
                            QMessageBox.warning(msg, "Alerta",
                                                "El campo de Deporte/Actividad Física no puede estar vacio.")
                        else:
                            msg = QMessageBox()
                            QMessageBox.critical(msg, "Problema con la Actividad Física",
                                                 "El campo solo puede contener caracteres alfabeticos.")
                    elif telf == "":
                        msg = QMessageBox()
                        QMessageBox.warning(msg, "Alerta", "El campo de teléfono no puede estar vacio.")
                    else:
                        msg = QMessageBox()
                        QMessageBox.critical(msg, "Problema con el teléfono",
                                             "El teléfono solo puede contener caracteres númericos.")
                elif documento == "":
                    msg = QMessageBox()
                    QMessageBox.warning(msg, "Alerta", "El campo de documento no puede estar vacio.")
                else:
                    msg = QMessageBox()
                    QMessageBox.critical(msg, "Problema con la identificación",
                                         "El documento solo puede contener caracteres númericos.")
            elif apellido == "":
                msg = QMessageBox()
                QMessageBox.warning(msg, "Alerta", "El campo de apellido no puede estar vacio.")
            else:
                msg = QMessageBox()
                QMessageBox.critical(msg, "Problema con el apellido",
                                     "El apellido solo puede contener caracteres alfabeticos.")
        elif name == "":
            msg = QMessageBox()
            QMessageBox.warning(msg, "Alerta", "El campo de nombre no puede estar vacio.")
        else:
            msg = QMessageBox()
            QMessageBox.critical(msg, "Problema con el nombre",
                                 "El nombre solo puede contener caracteres alfabeticos.")

    def guardar_data(self, nombrec, fecha, hora):

        medidas = []
        multi_medidas = []

        table1 = self.table_medidas
        table2 = self.table_pliegues_cut
        table3 = self.table_perife_circun
        cont1 = 1
        cont2 = 1
        cont3 = 1

        for i in range(3):
            medidas.append(table1.item(cont1, 4).text())
            if cont1 == 3:
                for i in range(4):
                    medidas.append(table2.item(cont2, 4).text())
                    if cont2 == 3:
                        for i in range(6):
                            medidas.append(table3.item(cont2, 4).text())
                            cont3 += 1
                    cont2 += 1

            cont1 += 1

        multi_medidas.append(medidas)

        lbl_adulto_h = [self.lbl_imc, self.lbl_icc, self.lbl_ice, self.lbl_porcent_grasa
            , self.lbl_p_degrasa, self.lbl_p_degrasa_percentil, self.lbl_indice_mlg
            , self.lbl_camb, self.lbl_iamb, self.lbl_complex, self.lbl_peso_ideal]

        salida_f = self.salida_final(medidas)
        salida_f = [float(medida) for medida in salida_f]

        for label, salida in zip(lbl_adulto_h, salida_f):
            label.setText(f"{label.text()} {salida:.2f}")

        datas = []
        self.fecha = str(fecha)
        self.hora = str(hora)
        self.doc_complete = self.tipo_doc.currentText() + "-" + self.documento.text()
        self.fecha_nac = str(self.fnacimiento.text())
        if os.stat('pacientes.txt').st_size == 0:
            new_patient = Patient(1, nombrec, self.doc_complete, self.tipo_pac.currentText(),
                                  self.sexo.currentText(), self.country.currentText(), self.fecha_nac, self.fecha,
                                  self.hora, multi_medidas, self.act_deporte.text())
            with open(f'pacientes.txt', 'ab') as file:
                pickle.dump(new_patient, file)
            file.close()
            self.btn_sigR1.setChecked(False)
            self.btn_guardar_medidas.setChecked(False)
            self.btn_agregar_cita.setChecked(False)
            self.confirm_patient()
        else:
            with open(f'pacientes.txt', 'rb') as file2:
                while True:
                    try:
                        data = pickle.load(file2)
                        datas.append(data)
                    except EOFError:
                        break
                file2.close()
            for indice, data in enumerate(datas, start=1):
                if self.documento.text() in data.__dict__.values():
                    self.problem_patient()
                    break
                elif self.documento.text() not in data.__dict__.values() and indice in data.__dict__.values():
                    self.doc_complete = self.tipo_doc.currentText() + "-" + self.documento.text()
                    id = indice + len(datas)
                    new_patient = Patient(str(id), nombrec, self.doc_complete,
                                          self.tipo_pac.currentText(), self.sexo.currentText(),
                                          self.country.currentText(), self.fecha_nac, self.fecha, self.hora, multi_medidas, self.act_deporte.text())
                    print("xdd")
                    with open(f'pacientes.txt', 'ab') as file:
                        pickle.dump(new_patient, file)
                    file.close()
                    print("xddd")
                    self.btn_sigR1.setChecked(False)
                    self.btn_guardar_medidas.setChecked(False)
                    self.btn_agregar_cita.setChecked(False)
                    self.confirm_patient()
                    break

    def salida_final(self, medidas):

        fecha_nac = datetime.strptime(str(self.fnacimiento.text()), "%m/%d/%Y")
        now = datetime.now()
        date = now.strftime("%m/%d/%Y")
        fecha_me = datetime.strptime(str(date), "%m/%d/%Y")
        edad = relativedelta(fecha_me, fecha_nac).years

        estatura = float(medidas[0])
        peso = float(medidas[1])
        prof_abdominal = float(medidas[2])
        triceps = float(medidas[3])
        subescapular = float(medidas[4])
        biceps = float(medidas[5])
        cresta_iliaca = float(medidas[6])
        p_brazo_rela = float(medidas[7])
        p_brazo_flex_contraido = float(medidas[8])
        p_muñeca = float(medidas[9])
        p_min_cintura = float(medidas[10])
        p_abdo = float(medidas[11])
        p_caderas = float(medidas[12])

        imc = peso / estatura ** 2

        icc = p_min_cintura / p_caderas

        ice = p_min_cintura / estatura

        porcent_grasa = triceps + subescapular + biceps + cresta_iliaca
        porcent_grasa_con_log = log(porcent_grasa)
        dato6 = 1.1610 - (0.0632 * porcent_grasa_con_log)
        dato7 = ((4.95 / dato6) - 4.50) * 100
        porcent_grasa_f = dato7

        peso_d_grasa = peso * (porcent_grasa_f / 100)

        porcent_grasa_percentil = self.porcent_grasa_percentil(porcent_grasa_f, edad)

        indice_mlg = (peso * (((100 - porcent_grasa_f) / 100) + 6.1 * (1.8 * estatura))) / estatura ** 2

        dato_extra = 0.31416 * (triceps / 10)
        camb = (((p_brazo_rela - dato_extra) ** 2) / (4 * 3.1416)) - 10.0

        iamb = self.iamb(porcent_grasa_f, edad)

        complex = estatura / p_muñeca

        peso_ideal = estatura - 100 - (((estatura - 150) / 4) + ((edad - 20) / 20))

        salida = [imc, icc, ice, porcent_grasa_f, peso_d_grasa, porcent_grasa_percentil, indice_mlg, camb, iamb,
                  complex, peso_ideal]
        return salida

    def data_pdf(self, row, c_row):

        if row == 0:

            row = 0

            fecha_nac = datetime.strptime(str(self.fnacimiento.text()), "%d/%m/%Y")
            now = datetime.now()
            date = now.strftime("%m/%d/%Y")
            fecha_me = datetime.strptime(str(date), "%m/%d/%Y")
            edad = relativedelta(fecha_me, fecha_nac).years

            all_data = [edad, self.apellido.text(), self.name.text(), self.sexo.currentText(),
                        self.tipo_doc.currentText(),
                        self.documento.text(), self.country.currentText(), self.act_deporte.text(),
                        self.tipo_pac.currentText(),
                        fecha_nac, fecha_me]

            medidas = []
            multi_medidas = []

            table1 = self.table_medidas
            table2 = self.table_pliegues_cut
            table3 = self.table_perife_circun
            cont1 = 1
            cont2 = 1
            cont3 = 1

            for i in range(3):
                medidas.append(table1.item(cont1, 4).text())
                if cont1 == 3:
                    for i in range(4):
                        medidas.append(table2.item(cont2, 4).text())
                        if cont2 == 3:
                            for i in range(6):
                                medidas.append(table3.item(cont2, 4).text())
                                cont3 += 1
                        cont2 += 1

                cont1 += 1

            multi_medidas.append(medidas)
            self.create_pdf(all_data, multi_medidas, row)

        elif row > 0:

            data = []
            with open(f'pacientes.txt', 'rb') as file_new_d:
                while True:
                    try:
                        info = pickle.load(file_new_d)
                        data.append(info)
                    except EOFError:
                        break

            multi_medidas = []
            all_data = []
            for position, datos in enumerate(data):
                str(datos.__dict__.get('name'))
                str(datos.__dict__.get('doc'))
                str(datos.__dict__.get('t_pac'))
                str(datos.__dict__.get('sex'))
                str(datos.__dict__.get('country'))
                str(datos.__dict__.get('fnacimiento'))
                str(datos.__dict__.get('fecha'))
                str(datos.__dict__.get('hora'))
                str(datos.__dict__.get('medidas'))
                str(datos.__dict__.get('act_deporte'))

                row_data = [datos.__dict__.get('name'), datos.__dict__.get('doc'),
                            datos.__dict__.get('t_pac'), datos.__dict__.get('sex'), datos.__dict__.get('country'),
                            datos.__dict__.get('fnacimiento'), datos.__dict__.get('fecha'), datos.__dict__.get('hora'),
                            datos.__dict__.get('medidas'), str(datos.__dict__.get('act_deporte'))]
                all_data.append(row_data)

            fecha_nac = datetime.strptime(str(all_data[row-1][5]), "%m/%d/%Y")
            now = datetime.now()
            date = now.strftime("%m/%d/%Y")
            fecha_me = datetime.strptime(str(date), "%m/%d/%Y")
            edad = relativedelta(fecha_me, fecha_nac).years

            nombre_sin_div = str(all_data[row - 1][0])
            nombre_apellido = nombre_sin_div.split()

            doc_sin_div = str(all_data[row - 1][1])
            tipo_y_doc = doc_sin_div.split("-")

            multi_medidas.append(all_data[row - 1][8][c_row - 1])

            print("LOOOOL")

            if row == 1:
                print("LOOOOL1")
                all_data_f = [edad, nombre_apellido[1], nombre_apellido[0], all_data[row - 1][3], tipo_y_doc[0],
                              tipo_y_doc[1],
                              all_data[row - 1][3], all_data[row - 1][9], all_data[row - 1][2], all_data[row - 1][5],
                              all_data[row - 1][6]]
                self.create_pdf(all_data_f, multi_medidas)
            elif row > 1:
                print("LOOOOL2")
                all_data_f = [edad, nombre_apellido[1], nombre_apellido[0], all_data[row - 1][3], tipo_y_doc[0],
                              tipo_y_doc[1],
                              all_data[row - 1][3], all_data[row - 1][9], all_data[row - 1][2], all_data[row - 1][5],
                              all_data[row - 1][8][c_row - 1][13]]
                self.create_pdf(all_data_f, multi_medidas)

    def porcent_grasa_percentil(self, porcentaje_g, edad_u):
        edad_min = [18, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70]
        edad_max = [24, 29, 34, 39, 44, 49, 54, 59, 64, 69, 74]
        tabla = [8, 9, 10, 12, 16, 20, 23, 25, 28], [9, 10, 11, 13, 18, 23, 25, 26, 29], [16, 17, 18, 20, 23, 26, 27,
                                                                                          28, 30], [15, 17, 18, 20, 23,
                                                                                                    25, 27, 27, 29], [
            14, 16, 18, 21,
            26,
            30,
            32,
            34,
            36], [15, 17, 19, 21, 26, 30, 32, 34, 36], [15, 17, 19, 22, 27, 31, 30, 35, 37], [15, 18, 20, 22, 27, 31,
                                                                                              30, 35, 37], [16, 18,
                                                                                                            20, 22,
                                                                                                            27, 31,
                                                                                                            33, 35,
                                                                                                            37], [13,
                                                                                                                  16,
                                                                                                                  18,
                                                                                                                  21,
                                                                                                                  26,
                                                                                                                  30,
                                                                                                                  33,
                                                                                                                  35,
                                                                                                                  37], [
            13, 16, 18, 21, 26, 30, 33, 34, 36]
        percentil = [5, 10, 15, 25, 50, 75, 85, 90, 95]

        for edad in zip(edad_min, edad_max):

            if edad_u >= edad[0] and edad_u <= edad[1]:

                posicion_edad = edad_min.index(edad[0])
                percentage = tabla[posicion_edad]

                for valor in percentage:
                    closest_body_fat = min(percentage, key=lambda x: abs(x - porcentaje_g))
                    if closest_body_fat == valor:
                        ubicacion = percentage.index(valor)
                        return str(percentil[ubicacion])

    def iamb(self, porcentaje_g, edad_u):
        edad_min = [18, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70]
        edad_max = [24, 29, 34, 39, 44, 49, 54, 59, 64, 69, 74]
        tabla = [34.2, 37.3, 39.6, 42.7, 49.4, 57.1, 61.8, 65.0, 72.0], [36.6, 39.9, 42.4, 46.0, 53.0, 61.4, 66.1,
                                                                         68.9, 74.5], [37.9, 40.9, 43.4, 47.3, 54.4,
                                                                                       63.2, 67.6, 70.8, 76.1], [
            38.5, 42.6, 44.6, 47.9, 55.3, 64.0, 69.1, 72.7, 77.6], [38.4, 42.1, 45.1, 48.7, 56.0, 64.0, 68.5,
                                                                    71.6, 77.0], [37.7, 41.3, 43.7, 47.9, 55.2,
                                                                                  63.3, 68.4, 72.2, 76.2], [
            36.0, 40.0, 42.7, 46.6, 54.0, 62.7, 67.0, 70.4, 77.4], [36.5, 40.8, 42.7, 46.7, 54.3, 61.9, 66.4,
                                                                    69.6, 75.1], [34.5, 38.7, 41.2, 44.9, 52.1,
                                                                                  60.0, 64.8, 67.5, 71.6], [
            31.4, 35.8, 38.4, 42.3, 49.1, 57.3, 61.2, 64.3, 69.4], [29.7, 33.8, 36.1, 40.2, 47.0, 54.6, 59.1,
                                                                    62.1, 67.3]
        percentil = [5, 10, 15, 25, 50, 75, 85, 90, 95]

        for edad in zip(edad_min, edad_max):

            if edad_u >= edad[0] and edad_u <= edad[1]:

                posicion_edad = edad_min.index(edad[0])
                percentage = tabla[posicion_edad]

                for valor in percentage:
                    closest_body_fat = min(percentage, key=lambda x: abs(x - porcentaje_g))
                    if closest_body_fat == valor:
                        ubicacion = percentage.index(valor)
                        return str(percentil[ubicacion])

    def problem_patient(self):
        msg = QMessageBox()
        QMessageBox.critical(msg, "Error al registrar al paciente",
                             "Este paciente ya se encuentra en el sistema.")
        self.content.setCurrentWidget(self.Paciente)
        self.content_patient.setCurrentWidget(self.Pacientes)

    def confirm_patient(self):
        msg = QMessageBox()
        QMessageBox.information(msg, "Registro completado",
                                "¡El paciente " + self.name.text() + " " + self.apellido.text() + " fue registrado con exito!")
        self.update_table()

    # Citas

    def ver_cita(self, item):
        self.row_update_cita = item.row()
        self.items_c(item.row())
        self.content_table_c(item.row())
        self.content_patient.setCurrentWidget(self.data_patient)
        self.ingresar_patient.setCurrentWidget(self.citas)
        self.table_citas.selectRow(0)

    def volver_cita(self, i):
        self.row_update_cita = i
        self.items_c(self.row_update_cita)
        self.content_table_c(self.row_update_cita)
        self.content_patient.setCurrentWidget(self.data_patient)
        self.ingresar_patient.setCurrentWidget(self.citas)
        self.table_citas.selectRow(0)

    def new_cita(self):
        self.btn_sigR1.setEnabled(False)
        self.btn_agregar_cita.setEnabled(True)
        self.ingresar_patient.setCurrentWidget(self.Mediciones)

    def ver_informe_cita(self):
        if self.table_citas.currentRow() > 0:
            cita_row = self.table_citas.currentRow()
            self.data_pdf(cita_row, cita_row)
        else:
            msg = QMessageBox()
            QMessageBox.critical(msg, "Selección de la cita",
                                 "No se ha seleccionado ninguna cita del paciente.")

    def items_c(self, i):
        data = []
        with open(f'pacientes.txt', 'rb') as file_new_d:
            while True:
                try:
                    info = pickle.load(file_new_d)
                    data.append(info)
                except EOFError:
                    break

        row_data = []
        all_data = []
        med = []
        for datos in data:
            str(datos.__dict__.get('medidas'))
            row_data = [datos.__dict__.get('medidas')]
            all_data.append(row_data)

        med = all_data[i - 1][0]

        contador = 1

        for x in med:
            contador += 1

        self.table_citas.setRowCount(contador)

        for row in range(contador):
            it = row + 1
            for i in range(4):
                item = QtWidgets.QTableWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
                font = QtGui.QFont()
                font.setFamily("Circular Std")
                font.setPointSize(11)
                item.setFont(font)
                item.setFlags(
                    QtCore.Qt.ItemFlag.ItemIsDragEnabled | QtCore.Qt.ItemFlag.ItemIsSelectable | QtCore.Qt.ItemFlag.ItemIsDropEnabled | QtCore.Qt.ItemFlag.ItemIsUserCheckable | QtCore.Qt.ItemFlag.ItemIsEnabled)
                self.table_citas.setItem(it, i, item)

    def content_table_c(self, i):

        data = []
        with open(f'pacientes.txt', 'rb') as file_new_d:
            while True:
                try:
                    info = pickle.load(file_new_d)
                    data.append(info)
                except EOFError:
                    break

        row_data = []
        all_data = []
        med = []
        contador = 0
        for position, datos in enumerate(data):
            str(datos.__dict__.get('fecha'))
            str(datos.__dict__.get('hora'))
            str(datos.__dict__.get('medidas'))
            str(datos.__dict__.get('name'))
            str(datos.__dict__.get('fnacimiento'))
            str(datos.__dict__.get('t_pac'))
            str(datos.__dict__.get('sex'))
            str(datos.__dict__.get('country'))

            row_data = [datos.__dict__.get('fecha'), datos.__dict__.get('hora'), datos.__dict__.get('medidas'),
                        str(datos.__dict__.get('name')), str(datos.__dict__.get('fnacimiento')),
                        str(datos.__dict__.get('t_pac')), str(datos.__dict__.get('sex')),
                        str(datos.__dict__.get('country'))]
            all_data.append(row_data)
            contador += 1

        med = all_data[i - 1][2]

        fecha_nac = datetime.strptime(all_data[i-1][4], "%m/%d/%Y")
        now = datetime.now()
        date = now.strftime("%m/%d/%Y")
        fecha_me = datetime.strptime(str(date), "%m/%d/%Y")
        edad = relativedelta(fecha_me, fecha_nac).years

        self.name_cita.setText(all_data[i - 1][3])
        self.edad_cita.setText(str(edad))
        self.tpaciente_cita.setText(all_data[i - 1][5])
        self.sexo_cita.setText(all_data[i - 1][6])
        self.pais_cita.setText(all_data[i - 1][7])

        for x, medida in enumerate(med):
            if x == 0:
                self.lbl_fecha_hora.setText(
                    "La última vez que se agregó una cita fue el " + all_data[i - 1][0] + " a las " + all_data[i - 1][1])

                item = self.table_citas.item(x + 1, 0)
                item.setText(str(x + 1))
                item = self.table_citas.item(x + 1, 1)
                item.setText(str("Informe #") + str(x + 1))
                item = self.table_citas.item(x + 1, 2)
                item.setText(str(all_data[i - 1][0]))
                item = self.table_citas.item(x + 1, 3)
                item.setText(str(all_data[i - 1][1]))
            elif x > 0:
                self.lbl_fecha_hora.setText(
                    "La última vez que se agregó una cita fue el " + all_data[i - 1][2][x][13] + " a las " + all_data[i - 1][2][x][14])

                item = self.table_citas.item(x + 1, 0)
                item.setText(str(x + 1))
                item = self.table_citas.item(x + 1, 1)
                item.setText(str("Informe #") + str(x + 1))
                item = self.table_citas.item(x + 1, 2)
                item.setText(str(all_data[i - 1][2][x][13]))
                item = self.table_citas.item(x + 1, 3)
                item.setText(str(all_data[i - 1][2][x][14]))

    def guardar_cita(self, id, name, doc, t_pac, sex, country, fnacimiento, fecha, hora, medidas, act_deporte, overwrite):
        if overwrite == 0:
            new_patient = Patient(id, name, doc,
                                  t_pac, sex,
                                  country, fnacimiento, fecha, hora, medidas, act_deporte)
            with open(f'pacientes.txt', 'wb') as file:
                pickle.dump(new_patient, file)
            file.close()
        else:
            new_patient = Patient(id, name, doc,
                                  t_pac, sex,
                                  country, fnacimiento, fecha, hora, medidas, act_deporte)
            with open(f'pacientes.txt', 'ab') as file:
                pickle.dump(new_patient, file)
            file.close()

    # Stretch para la tabla

    def strech_table(self):

        # Horizontal

        horizontal_table_p = self.table_patient.horizontalHeader()
        for i in range(5):
            horizontal_table_p.setSectionResizeMode(
                i, QtWidgets.QHeaderView.ResizeMode.Stretch)

        horizontal_medidas_simples = self.table_medidas.horizontalHeader()
        for i in range(4):
            horizontal_medidas_simples.setSectionResizeMode(
                i, QtWidgets.QHeaderView.ResizeMode.Stretch)

        horizontal_tabla_pliegues = self.table_pliegues_cut.horizontalHeader()
        for i in range(4):
            horizontal_tabla_pliegues.setSectionResizeMode(
                i, QtWidgets.QHeaderView.ResizeMode.Stretch)

        horizontal_tabla_citas = self.table_citas.horizontalHeader()
        for i in range(4):
            horizontal_tabla_citas.setSectionResizeMode(
                i, QtWidgets.QHeaderView.ResizeMode.Stretch)

        # Vertical

        verticalHeader = self.table_medidas.verticalHeader()
        for i in range(4):
            verticalHeader.setSectionResizeMode(
                i, QtWidgets.QHeaderView.ResizeMode.Stretch)

        verticalHeader = self.table_pliegues_cut.verticalHeader()
        for i in range(5):
            verticalHeader.setSectionResizeMode(
                i, QtWidgets.QHeaderView.ResizeMode.Stretch)

    # Animaciones para el side menu y sus opciones

    def side_menu(self):
        width = self.menu.width()

        Ui_MainWindow.animation(self, width, "left")

    def side_menu_op(self):
        width = self.menu.width()

        Ui_MainWindow.animation_op(self, width, "left")

    def animation(self, left_box_width, direction):
        right_width = 0
        left_width = 0

        if left_box_width == 51 and direction == "left":
            left_width = 240
            tg_menu = QtGui.QIcon()
            tg_menu.addPixmap(QtGui.QPixmap("icons/left.png"), QtGui.QIcon.Mode.Normal,
                              QtGui.QIcon.State.Off)
            self.selected_op(self.btn_menu)
            self.btn_menu.setIcon(tg_menu)
        else:
            tg_menu = QtGui.QIcon()
            tg_menu.addPixmap(QtGui.QPixmap("icons/menu-lockw.png"), QtGui.QIcon.Mode.Normal,
                              QtGui.QIcon.State.Off)
            self.deselected_op(self.btn_menu)
            self.btn_menu.setIcon(tg_menu)
            left_width = 51

        self.left_box = QPropertyAnimation(self.menu, b"minimumWidth")
        self.left_box.setDuration(Settings.TIME_ANIMATION)
        self.left_box.setStartValue(left_box_width)
        self.left_box.setEndValue(left_width)
        self.left_box.setEasingCurve(QEasingCurve.Type.InOutQuart)

        self.group = QParallelAnimationGroup()
        self.group.addAnimation(self.left_box)
        self.group.start()

    def animation_op(self, left_box_width, direction):
        right_width = 0
        left_width = 0

        if left_box_width == 240 and direction == "left":
            tg_menu = QtGui.QIcon()
            tg_menu.addPixmap(QtGui.QPixmap("icons/menu-lockw.png"), QtGui.QIcon.Mode.Normal,
                              QtGui.QIcon.State.Off)
            self.deselected_op(self.btn_menu)
            self.btn_menu.setIcon(tg_menu)
            left_width = 51

            self.left_box = QPropertyAnimation(self.menu, b"minimumWidth")
            self.left_box.setDuration(Settings.TIME_ANIMATION)
            self.left_box.setStartValue(left_box_width)
            self.left_box.setEndValue(left_width)
            self.left_box.setEasingCurve(QEasingCurve.Type.InOutQuart)

            self.op = QParallelAnimationGroup()
            self.op.addAnimation(self.left_box)
            self.op.start()

    def selected_op(self, btn):
        btn.setStyleSheet("QPushButton {\n"
                          "background-color: rgb(0, 0, 30);\n"
                          "color: white;\n"
                          "border-left: 3px solid;\n"
                          "border-color: rgb(255, 255, 255);\n"
                          "}")

    def deselected_op(self, btn):
        btn.setStyleSheet("QPushButton {\n"
                          "border: 0px solid;\n"
                          "color: white;\n"
                          "text-align: left;\n"
                          "padding-left: 9px;\n"
                          "}\n"
                          "\n"
                          "QPushButton:hover {\n"
                          "background-color: rgb(0, 0, 30);\n"
                          "color: white;\n"
                          "border-left: 3px solid;\n"
                          "border-color: rgb(255, 255, 255);\n"
                          "}")


class Patient:
    def __init__(self, id, name, doc, t_pac, sex, country, fnacimiento, fecha, hora, medidas, act_deporte):
        self.id = id
        self.name = name
        self.doc = doc
        self.t_pac = t_pac
        self.sex = sex
        self.country = country
        self.fnacimiento = fnacimiento
        self.fecha = fecha
        self.hora = hora
        self.medidas = medidas
        self.act_deporte = act_deporte

    def get_id(self):
        return self.id

    def get_name(self):
        return self.name

    def get_doc(self):
        return self.doc

    def get_t_pac(self):
        return self.t_pac

    def get_sex(self):
        return self.sex

    def get_country(self):
        return self.country

    def get_fnacimiento(self):
        return self.fnacimiento

    def get_fecha(self):
        return self.fecha

    def get_hora(self):
        return self.hora

    def get_medidas(self):
        return self.medidas

    def get_actdeporte(self):
        return self.act_deporte

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
